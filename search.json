[{"title":"mysql 高可用","url":"/mysql%E9%AB%98%E5%8F%AF%E7%94%A8.html","content":"环境准备准备3台已配置好 mysql MGR 集群的服务器，配置教程参考mysql-MGR搭建\n\n\n\n服务器ip\nhostname\n主从\n系统\n已安装软件\n\n\n\n192.168.31.200\ns1\n主\ncentos7.9\nmysql5.7.38\n\n\n192.168.31.201\ns2\n从\ncentos7.9\nmysql5.7.38\n\n\n192.168.31.202\ns3\n从\ncentos7.9\nmysql5.7.38\n\n\n安装 proxysqlyum安装不推荐使用此方式下载，速度太慢\n\n添加 proxysql 仓库[root@s1 rpm]# cat &gt; /etc/yum.repos.d/proxysql.repo &lt;&lt; EOF[proxysql]name=ProxySQL YUM repositorybaseurl=https://repo.proxysql.com/ProxySQL/proxysql-2.4.x/centos/\\$releasevergpgcheck=1gpgkey=https://repo.proxysql.com/ProxySQL/proxysql-2.4.x/repo_pub_keyEOF\n\n安装[root@s1 rpm]# yum install proxysql\n\nrpm安装推荐使用\n\n下载 rpm 包下载地址 https://github.com/sysown/proxysql/releases\n\n下载完成后上传至 /data/rpm/ 目录下\n安装[root@s1 rpm]# yum install proxysql[root@s1 rpm]# yum install proxysql-2.4.3-1-centos7.x86_64.rpm\n\n服务管理启动[root@s1 rpm]# service proxysql start\n\n停止[root@s1 rpm]# service proxysql stop\n重启[root@s1 rpm]# service proxysql restart\n登录 proxysql 控制台[root@s1 rpm]# mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt=&#x27;Admin&gt; &#x27;\n\nproxysql有自己的控制台，不要和mysql的控制台弄混淆了\n\nproxy 配置间移动整套配置系统分为三层：顶层为 RUNTIME ,中间层为 MEMORY , 底层也就是持久层 DISK 和 CONFIG FILE 。\n\nRUNTIME ： 代表 ProxySQL 当前生效的正在使用的配置，无法直接修改这里的配置，必须要从下一层 “load” 进来。 \nMEMORY： MEMORY 层上面连接 RUNTIME 层，下面连接持久层。这层可以正常操作 ProxySQL 配置，随便修改，不会影响生产环境。修改一个配置一般都是现在 MEMORY 层完成的，确认正常之后在加载达到 RUNTIME 和 持久化的磁盘上。\nDISK 和 CONFIG FILE：持久化配置信息，重启后内存中的配置信息会丢失，所需要将配置信息保留在磁盘中。重启时，可以从磁盘快速加载回来。\n\n配置mysql配置创建监控账号创建一个监控账号用来提供给 proxysql 使用, 只需要在 MGR 主节点创建就行，从节点会自动同步。\nmysql&gt; create user &#x27;monitor&#x27;@&#x27;%&#x27; identified by &#x27;As123456!&#x27;;mysql&gt; grant usage,replication client on *.* to monitor@&#x27;%&#x27;;mysql&gt; flush privileges;\n\nproxysql 配置添加被监控的mysql服务添加\n# 添加 mysql 服务Admin&gt; INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.200&#x27;,3306);Admin&gt; INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.201&#x27;,3306);Admin&gt; INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.202&#x27;,3306);\n\n查看是否成功\nAdmin&gt; SELECT * FROM mysql_servers;\n\n\n设置账号密码设置\n# 在 proxysql 数据库设置监控的账号密码Admin&gt; UPDATE global_variables SET variable_value=&#x27;monitor&#x27; WHERE variable_name=&#x27;mysql-monitor_username&#x27;;Admin&gt; UPDATE global_variables SET variable_value=&#x27;As123456!&#x27; WHERE variable_name=&#x27;mysql-monitor_password&#x27;;# 设置时间间隔Admin&gt; UPDATE global_variables SET variable_value=&#x27;2000&#x27; WHERE variable_name IN (&#x27;mysql-monitor_connect_interval&#x27;,&#x27;mysql-monitor_ping_interval&#x27;,&#x27;mysql-monitor_read_only_interval&#x27;);\n\n查看是否成功\nAdmin&gt; SELECT * FROM global_variables WHERE variable_name LIKE &#x27;mysql-monitor_%&#x27;;\n\n\n生效并保存到磁盘\nAdmin&gt; LOAD MYSQL VARIABLES TO RUNTIME;Admin&gt; SAVE MYSQL VARIABLES TO DISK;\n\n\n\n添加后端服务器# 添加服务器INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.200&#x27;,3306);INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.201&#x27;,3306);INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.202&#x27;,3306);# 查看服务器Admin&gt; SELECT * FROM mysql_servers;+--------------+----------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+| hostgroup_id | hostname       | port | gtid_port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |+--------------+----------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+| 1            | 192.168.31.200 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         || 2            | 192.168.31.202 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         || 2            | 192.168.31.201 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         || 2            | 192.168.31.200 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |+--------------+----------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+4 rows in set (0.00 sec)# 生效并保存LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;\n\n组复制 MGR# 如果 read_only=0 ,  hostgroup 会被设置为 1# 如果 read_only=1 ,  hostgroup 会被设置为 2INSERT INTO mysql_replication_hostgroups (writer_hostgroup,reader_hostgroup,comment) VALUES (1,2,&#x27;cluster1&#x27;);# 生效并保存LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;# 查看记录Admin&gt; SELECT * FROM monitor.mysql_server_read_only_log ORDER BY time_start_us DESC LIMIT 3;+----------------+------+------------------+-----------------+-----------+-------+| hostname       | port | time_start_us    | success_time_us | read_only | error |+----------------+------+------------------+-----------------+-----------+-------+| 192.168.31.202 | 3306 | 1646721733774003 | 563             | 1         | NULL  || 192.168.31.200 | 3306 | 1646721733755560 | 148             | 0         | NULL  || 192.168.31.201 | 3306 | 1646721733738055 | 588             | 1         | NULL  |+----------------+------+------------------+-----------------+-----------+-------+3 rows in set (0.00 sec)\n\nmysql 用户通过定义 default_hostgroup，我们指定用户应该默认连接到哪些后端服务器（即，这将是来自特定用户的流量的默认路由，可以配置其他规则以重新路由，但是在它们不存在的情况下，所有查询都会去到特定的主机组）\n# 查询select * from mysql_users;# 添加INSERT INTO mysql_users(username,password,default_hostgroup) VALUES (&#x27;remote&#x27;,&#x27;asAS123456!&#x27;,1);# 生效并保存LOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS TO DISK;\n\nsql统计根据总执行时间找到前 5 个查询Admin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+---------------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time      |+--------------------+--------------------------+------------+---------------+| 0x037C3E6D996DAFE2 | SELECT a.ip_id as ip_id, | 2030026798 | 1479082636017 || 0xB081A85245DEA5B7 | SELECT a.ip_id as ip_id, | 2025902778 | 1206116187539 || 0x38BE36BDFFDBE638 | SELECT instance.name as  | 59343662   | 1096236803754 || 0xB4233552504E43B8 | SELECT ir.type as type,  | 1362897166 | 488971769571  || 0x4A131A16DCFFD6C6 | SELECT i.id as id, i.sta | 934402293  | 475253770301  |+--------------------+--------------------------+------------+---------------+5 rows in set (0.01 sec)\n\n查询次数最多的 5 条sqlAdmin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; ORDER BY count_star DESC LIMIT 5;+--------------------+--------------------------+------------+---------------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time      |+--------------------+--------------------------+------------+---------------+| 0x037C3E6D996DAFE2 | SELECT a.ip_id as ip_id, | 2030040688 | 1479092529369 || 0xB081A85245DEA5B7 | SELECT a.ip_id as ip_id, | 2025916528 | 1206123010791 || 0x22E0A5C585C53EAD | SELECT id as instanceid, | 1551361254 | 426419508609  || 0x3DB4B9FA4B2CB36F | SELECT i.id as instancei | 1465274289 | 415565419867  || 0xB4233552504E43B8 | SELECT ir.type as type,  | 1362906755 | 488974931108  |+--------------------+--------------------------+------------+---------------+5 rows in set (0.00 sec)\n\n查询最耗时的 5 条sqlAdmin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time,sum_time/count_star avg_time, min_time, max_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; ORDER BY max_time DESC LIMIT 5;+--------------------+--------------------------+------------+--------------+----------+----------+-----------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time     | avg_time | min_time | max_time  |+--------------------+--------------------------+------------+--------------+----------+----------+-----------+| 0x36CE5295726DB5B4 | SELECT COUNT(*) as total | 146390     | 185951894994 | 1270249  | 445      | 237344243 || 0xDA8C56B5644C0822 | SELECT COUNT(*) as total | 44130      | 24842335265  | 562935   | 494      | 231395575 || 0x8C1B0405E1AAB9DB | SELECT COUNT(*) as total | 1194       | 1356742749   | 1136300  | 624      | 216677507 || 0x6C03197B4A2C34BE | Select *, DateDiff(Date_ | 4796       | 748804483    | 156131   | 607      | 197881845 || 0x1DEFCE9DEF3BDF87 | SELECT DISTINCT i.extid  | 592196     | 40209254260  | 67898    | 416      | 118055372 |+--------------------+--------------------------+------------+--------------+----------+----------+-----------+5 rows in set (0.01 sec)\n\n查找按总执行时间前 5，并且最短执行时间至少为 1 毫秒：Admin&gt; SELECT digest,SUBSTR(digest_text,0,20),count_star,sum_time,sum_time/count_star avg_time, min_time, max_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; AND min_time &gt; 1000 ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+-------------+----------+----------+----------+| digest             | SUBSTR(digest_text,0,20) | count_star | sum_time    | avg_time | min_time | max_time |+--------------------+--------------------------+------------+-------------+----------+----------+----------+| 0x9EED412C6E63E477 | SELECT a.id as acco      | 961733     | 24115349801 | 25074    | 10994    | 7046628  || 0x8DDD43A9EA37750D | Select ( Coalesce((      | 107069     | 3156179256  | 29477    | 1069     | 24600674 || 0x9EED412C6E63E477 | SELECT a.id as acco      | 91996      | 1883354396  | 20472    | 10095    | 497877   || 0x08B23A268C35C08E | SELECT id as reward      | 49401      | 244088592   | 4940     | 1237     | 1483791  || 0x437C846F935344F8 | SELECT Distinct i.e      | 164        | 163873101   | 999226   | 1383     | 7905811  |+--------------------+--------------------------+------------+-------------+----------+----------+----------+5 rows in set (0.01 sec)\n\n查找按总执行时间排序的前 5 个查询，平均执行时间至少为 1 秒。还显示总执行时间的百分比：Admin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time,sum_time/count_star avg_time, ROUND(sum_time*100.00/(SELECT SUM(sum_time) FROM stats_mysql_query_digest),3) pct FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; AND sum_time/count_star &gt; 1000000 ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+--------------+----------+-------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time     | avg_time | pct   |+--------------------+--------------------------+------------+--------------+----------+-------+| 0x36CE5295726DB5B4 | SELECT COUNT(*) as total | 146390     | 185951894994 | 1270249  | 2.11  || 0xD38895B4F4D2A4B3 | SELECT instance.name as  | 9783       | 12409642528  | 1268490  | 0.141 || 0x8C1B0405E1AAB9DB | SELECT COUNT(*) as total | 1194       | 1356742749   | 1136300  | 0.015 |+--------------------+--------------------------+------------+--------------+----------+-------+3 rows in set (0.00 sec)\n\n查找按总执行时间排序的前 5 个查询，平均执行时间至少为 15 毫秒，并显示占总执行时间的百分比：Admin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time,sum_time/count_star avg_time, ROUND(sum_time*100.00/(SELECT SUM(sum_time) FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27;),3) pct FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; AND sum_time/count_star &gt; 15000 ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+---------------+----------+--------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time      | avg_time | pct    |+--------------------+--------------------------+------------+---------------+----------+--------+| 0x38BE36BDFFDBE638 | SELECT instance.name as  | 59360371   | 1096562204931 | 18472    | 13.006 || 0x36CE5295726DB5B4 | SELECT COUNT(*) as total | 146390     | 185951894994  | 1270249  | 2.205  || 0x1DEFCE9DEF3BDF87 | SELECT DISTINCT i.extid  | 592281     | 40215136635   | 67898    | 0.477  || 0xDA8C56B5644C0822 | SELECT COUNT(*) as total | 44130      | 24842335265   | 562935   | 0.295  || 0x9EED412C6E63E477 | SELECT a.id as accountid | 961768     | 24116011513   | 25074    | 0.286  |+--------------------+--------------------------+------------+---------------+----------+--------+5 rows in set (0.00 sec)\n\n规则设置根据 digest 设置规则\nINSERT INTO mysql_query_rules (rule_id,active,digest,destination_hostgroup,apply)VALUES(1,1,&#x27;0x38BE36BDFFDBE638&#x27;,20,1);\n\n根据 match_digest 设置规则(正则表达式)\nINSERT INTO mysql_query_rules (rule_id,active,match_digest,destination_hostgroup,apply)VALUES(1,1,&#x27;^SELECT COUNT\\(\\*\\)&#x27;,20,1);\n\n集群目前已支持同步的数据\n\nglobal_variables (Supported from ProxySQL 2.1.x)\nmysql_query_rules\nmysql_servers\nmysql_users\nproxysql_servers\n\nproxy 集群服务器# 查看select * from proxysql_servers;# 添加集群INSERT INTO `proxysql_servers` (hostname, port, comment) VALUES (&#x27;192.168.31.200&#x27;, 6032, &#x27;proxysql1&#x27;);INSERT INTO `proxysql_servers` (hostname, port, comment) VALUES (&#x27;192.168.31.201&#x27;, 6032, &#x27;proxysql2&#x27;);# 生效并保存LOAD PROXYSQL SERVERS TO RUNTIME;SAVE PROXYSQL SERVERS TO DISK;\n\n设置 proxy 监控账号信息# 查看 admin 变量SELECT * FROM global_variables WHERE variable_name LIKE &#x27;admin%&#x27;;# 设置集群 proxy 监控账号密码及凭证UPDATE global_variables SET variable_value=&#x27;cluster&#x27; WHERE variable_name=&#x27;admin-cluster_username&#x27;;UPDATE global_variables SET variable_value=&#x27;cluster&#x27; WHERE variable_name=&#x27;admin-cluster_password&#x27;;UPDATE global_variables SET variable_value=&#x27;admin:admin;cluster:cluster&#x27; WHERE variable_name=&#x27;admin-admin_credentials&#x27;;# 生效并保存LOAD ADMIN VARIABLES TO RUNTIME;SAVE ADMIN VARIABLES TO DISK;\n\n此处有个大坑：cluster_username 不能直接使用 admin 账号，必须新建账号，且在 admin-admin_credentials 中配置账号信息，否则不触发同步\n\n查看同步状态# 查看集群状态SELECT * FROM stats_proxysql_servers_metrics;# 查看集群同步状态SELECT * FROM stats_proxysql_servers_checksums;\n\nkeepalived 高可用配置安装yum install keepalived\n\n配置主节点配置global_defs &#123;  script_user root&#125;# 定义检测 proxy 是否正常运行的脚本# interval: 定时心跳间隔(秒)# fall: 失败重试次数# rise: 服务关闭后需要连续几次响应才认为服务重新启动的次数vrrp_script check_proxy &#123; script &quot;/bin/systemctl status proxysql.service&quot; interval 2 fall 2 rise 2&#125;# 优先级指定分配接口的顺序# interface: 当前机器的网卡# priority: 优先级vrrp_instance VI_01 &#123;  state MASTER  interface enp0s3  virtual_router_id 51  priority 100  # vip 配置  virtual_ipaddress &#123;    192.168.31.50  &#125;  # 执行脚本  track_script &#123;    check_proxy  &#125;&#125;\n\n从节点配置global_defs &#123;  script_user root&#125;vrrp_script check_proxy &#123; script &quot;/bin/systemctl status proxysql.service&quot; interval 2 fall 2 rise 2&#125;vrrp_instance VI_01 &#123;  state BACKUP  interface enp0s3  virtual_router_id 51  priority 101  # The virtual ip address shared between the two loadbalancers  virtual_ipaddress &#123;  192.168.31.50  &#125;  track_script &#123;    check_proxy  &#125;&#125;\n\n启动service keepalived start\n\n参考地址\n官方文档: https://proxysql.com/documentation/\n官方集群文档: https://proxysql.com/documentation/proxysql-cluster/   \n集群参考: https://proxysql.com/blog/proxysql-cluster/\n高可用配置: https://mysqldb-info.blogspot.com/2019/08/make-proxysql-for-high-availability.html\n\n\n","categories":["数据库"],"tags":["keepalived","proxysql","mysql"]},{"title":"mysql-MGR搭建","url":"/mysql-MGR%E6%90%AD%E5%BB%BA.html","content":"组复制背景异步复制传统的 MySQL 复制提供了一种简单的主从复制方法。有一个主（source）和一个或多个从（replica）。主节点执行事务生成 binlog，然后异步的发送到从节点的relay log, 从服务器重新执行（在基于sql语句的复制）或（基于数据行的复制）。默认情况下所有服务器都拥有数据的完整副本。\n\n假如主发生宕机并且binlog还没来得及被从接收，而切换程序将从提升为新的主，就会出现数据不一致的情况！另外，在高并发的情况下，传统的主从复制，从节点可能会与主产生较大的延迟\n\n半同步复制半同步复制在异步复制中增加了一个同步步骤。这意味着主节点在提交时等待至少一个从节点确认它已收到事务。只有这样，主节点才会恢复提交操作。\n\n当主等待从同步成功的过程中主挂了，这个主事务提交就失败了，客户端也收到了事务执行失败的结果了，但是从上已经将binLog的内容写到Relay Log里了，这个时候，从数据就会多了，但是多了数据一般问题不算严重，多了总比少了好。\n\n组复制组复制由多个节点组成，当其中一个节点提交事务，组内多数节点可用时，就允许执行事务。保证服务器的高可用，底层使用 Paxos 算法。\n\n使用组复制的 mysql 版本必须大于等于 5.7.17\n\n环境准备准备三台已安装mysql5.7，且可以互相访问的服务器，安装mysql5.7参考mysql 安装。\n\n\n\n服务器ip\n系统\n已安装软件\n\n\n\n192.168.31.200\ncentos7.9\nmysql5.7.38\n\n\n192.168.31.201\ncentos7.9\nmysql5.7.38\n\n\n192.168.31.202\ncentos7.9\nmysql5.7.38\n\n\n安装修改 hostname分别修改三台服务器的 hostname 为 s1、s2、s3\n# 192.168.31.200[root@localhost ~]# hostnamectl set-hostname s1# 192.168.31.201[root@localhost ~]# hostnamectl set-hostname s2# 192.168.31.202[root@localhost ~]# hostnamectl set-hostname s3\n\n在三台服务器的 /etc/hosts 文件，添加 hostname  映射\n192.168.31.200 s1192.168.31.201 s2192.168.31.202 s3\n\n开启端口# 开启 33061 端口用来 MGR 通信[root@s1 ~]# firewall-cmd --zone=public --add-port=33061/tcp --permanent# 刷新防火墙[root@s1 ~]# firewall-cmd --reload\n\n关闭 selinux关闭 selinux, 否则 MGR 会启动失败。\n先临时关闭 setenforce 0，重启服务器会失效\n然后永久关闭，修改 /etc/selinux/config ，将SELINUX=enforcing改为SELINUX=disabled\n\n调整 mysql 配置文件在 /etc/my.cnf 文件 [mysqld] 下面追加， \n配置文件如下\n# -----------------# 禁用非 innodb 引擎# -----------------disabled_storage_engines=&quot;MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY&quot;# -----------------# 复制设置# -----------------# * 服务器编号，s1=1, s2=2, s3=s3 *server_id=1# 全局事务标识符开启gtid_mode=ONenforce_gtid_consistency=ON# 同步的数据写入数据库master_info_repository=TABLErelay_log_info_repository=TABLE# 开启组复制必须设置为 NONEbinlog_checksum=NONE# 开启 binloglog_slave_updates=ONlog_bin=binlogbinlog_format=ROW# -----------------# 组复制设置# -----------------# 添加组复制插件plugin_load_add=&#x27;group_replication.so&#x27;transaction_write_set_extraction=XXHASH64# 组名，同一个组必须相同，使用 UUID 格式，可以在 mysql 控制台使用 SELECT UUID(); 命令生成group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;# 服务启动时是否自动开启组复制，推荐手动开启group_replication_start_on_boot=off# * 与组成员通信的网络地址(注意端口不是3306，是需要新开的端口)  s1=s1:33061, s2=s2:33061, s3=s3:33061*group_replication_local_address= &quot;s1:33061&quot;# 组成员group_replication_group_seeds= &quot;s1:33061,s2:33061,s3:33061&quot;# 是否引导组，设置为 offgroup_replication_bootstrap_group=off\n\n注释中开头结尾带 * 号的话，说明此行代码需要根据环境进行调整\n\n重启服务\n[root@s1 ~]# service mysqld restart\n\n创建同步账号所有节点创建同步账号\n# 临时关闭 binlog,防止污染mysql&gt; SET SQL_LOG_BIN=0;# 创建rpl_user账户，此账户用于实现主从数据同步 mysql&gt; CREATE USER rpl_user@&#x27;%&#x27; IDENTIFIED BY &#x27;As123456!&#x27;;# 赋予主从同步权限 mysql&gt; GRANT REPLICATION SLAVE ON *.* TO rpl_user@&#x27;%&#x27;;# 让刚才的修改生效 mysql&gt; FLUSH PRIVILEGES;# 开启 binlogmysql&gt; SET SQL_LOG_BIN=1;\n\n加入组复制通道所有节点使用刚刚创建的同步账号，加入组复制通道\nmysql&gt; CHANGE MASTER TO MASTER_USER=&#x27;rpl_user&#x27;, MASTER_PASSWORD=&#x27;As123456!&#x27; FOR CHANNEL &#x27;group_replication_recovery&#x27;;\n\n\n\n启动组复制启动组整个组需要由单个节点来首次开启组复制，我们在配置文件中设置为关闭了自动引导组group_replication_bootstrap_group=off，所以这里我这里我们使用s1来手动开启：\n# 开启引导组mysql&gt; SET GLOBAL group_replication_bootstrap_group=ON;# 启动组复制mysql&gt; START GROUP_REPLICATION;# 关闭引导组mysql&gt; SET GLOBAL group_replication_bootstrap_group=OFF;\n\n启动完成后查看组成员，可以看到s1已经成功开启组复制了。\nmysql&gt; SELECT * FROM performance_schema.replication_group_members;\n\n\n节点加入引导组完成后，从节点只需要启动即可\nmysql&gt; START GROUP_REPLICATION;\n\ns2、s3 加入节点后，检查是否加入成功\nmysql&gt; SELECT * FROM performance_schema.replication_group_members;\n\n\n节点退出mysql&gt; STOP GROUP_REPLICATION;\n\n验证查看集群情况mysql&gt; SELECT * FROM performance_schema.replication_group_members;\n\n查看主节点如下图可以看出s1是主库，s2、s3 是从库。\nmysql&gt; SHOW STATUS LIKE &#x27;group_replication_primary_member&#x27;;\n\n\n模拟主从切换s1 退出并查看情况# s1 退出节点mysql&gt; STOP GROUP_REPLICATION;# s1 查看组员mysql&gt; SELECT * FROM performance_schema.replication_group_members;\n\n\n可以看到 s1 是 OFFLINE 状态，并且看不到其他节点\ns2 或 s3 查看节点情况# 查看组员mysql&gt; SELECT * FROM performance_schema.replication_group_members;# 查看主节点mysql&gt; SHOW STATUS LIKE &#x27;group_replication_primary_member&#x27;;\n\n\n可以看到 s2 变成了主节点\ns1 重新加入组，并查看情况# 重新加入组mysql&gt; START GROUP_REPLICATION;# 查看组员mysql&gt; SELECT * FROM performance_schema.replication_group_members;# 查看主节点mysql&gt; SHOW STATUS LIKE &#x27;group_replication_primary_member&#x27;;\n\n\n可以看到主节点仍然是 s2, 并不会切换成 s1\n结语MGR 发生故障时，虽然可以实现自动主从切换，但是无法提供固定的访问入口，客户端连接时仍需要通过第三方工具来实现。这里推荐使用 proxysql，参考mysql 高可用\n参考地址官方文档：https://dev.mysql.com/doc/refman/5.7/en/group-replication.html\nMGR搭建过程中遇到的错误以及解决办法: https://cloud.tencent.com/developer/article/1533657\n半同步复制的问题: https://zhuanlan.zhihu.com/p/367194130\n","categories":["数据库"],"tags":["centos","mysql"]},{"title":"node 版本切换","url":"/node%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2.html","content":"安装nvm下载地址：https://github.com/coreybutler/nvm-windows/releases\n\n使用查看版本nvm list\n\n\n安装nvm install &lt;node版本号&gt;\n\n\n使用需要以管理员身份运行 CMD\nnvm use &lt;node版本号&gt;\n\n\n卸载\n","categories":["前端"],"tags":["node"]},{"title":"mysql 安装","url":"/mysql%E5%AE%89%E8%A3%85.html","content":"yum安装不推荐，而且每次安装都要重复下载，而且国内下载速度太慢\n环境系统：centos7.9\n依赖：wget、yum-utils\n下载 yum源官方yum源：https://dev.mysql.com/downloads/repo/yum/\n\n# 下载 yum 源[root@localhost ~]# wget --no-check-certificate https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm# 安装 yum 源[root@localhost ~]# yum localinstall mysql80-community-release-el7-7.noarch.rpm\n\n切换 mysql 版本查看当前版本yum repolist all | grep mysql\n\n\n切换版本从上一步可以看到 MySQL 8.0 是 enabled 状态，本文安装 MySQL 5.7， 所以需要切换下\n# 关闭8.0，开启5.7[root@localhost ~]# yum-config-manager --disable mysql80-community[root@localhost ~]# yum-config-manager --enable mysql57-community# 验证是否切换成功[root@localhost ~]# yum repolist enabled | grep mysql\n\n\n安装[root@localhost ~]# yum install mysql-community-server\n\n安装完后请查看初始化\nrpm 安装推荐使用此安装方式\n环境系统：centos7.9\n下载 rpm 包下载地址 https://downloads.mysql.com/archives/community/\n\n上传至服务器 /data/rpm/ 目录，\n# 解压[root@mycentos7 ~]# cd /data/rpm[root@mycentos7 rpm]# tar xvf mysql-5.7.38-1.el7.x86_64.rpm-bundle.tar\n\n解压后如下\n\nmysql-community-test-5.7.38-1.el7.x86_64.rpm 是测试的，可以自行删除\n安装运行安装命令\n[root@localhost rpm]# yum install mysql-community-*\n\n\n安装完后请查看初始化\n初始化启动服务，查看临时密码[root@localhost rpm]# service mysqld start[root@localhost rpm]# grep &#x27;temporary password&#x27; /var/log/mysqld.log\n\n\n修改初始密码# 登录mysql&gt; mysql -uroot -p# 此处密码设置为 As123456!mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;As123456!&#x27;;\n\n\n\n创建远程连接账号# 创建一个远程连接用户，用来远程连接mysql&gt; create user &#x27;remote&#x27;@&#x27;%&#x27; identified by &#x27;As123456!&#x27;; #为fgoc用户赋予所有数据库资源的访问权限mysql&gt; grant all privileges on *.* to remote@&#x27;%&#x27;;# 让刚才的修改生效mysql&gt; FLUSH PRIVILEGES;\n\n开启端口如果系统开启了防火墙，需要开启端口才能远程访问\n[root@localhost rpm]# firewall-cmd --zone=public --add-port=3306/tcp --permanent[root@localhost rpm]# firewall-cmd --reload\n\n参考文档官方文档：https://dev.mysql.com/doc/refman/5.7/en/installing.html\n","categories":["数据库"],"tags":["centos","yum","mysql"]},{"title":"工具推荐","url":"/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90.html","content":"在线\nexcalidraw 画图 https://excalidraw.com/\ndraw.io流程图 https://app.diagrams.net/\ntrello 工作备忘录 https://trello.com/\n\n客户端\nAnotherRedisDesktopManager redis管理工具 https://github.com/qishibo/AnotherRedisDesktopManager\nsourcetree git管理 https://www.sourcetreeapp.com/\npicgo 图床 https://github.com/Molunerfinn/PicGo/releases\nwindirstat windows磁盘占用扫描工具 https://windirstat.net/download.html\nscreentogif gif录制 https://www.screentogif.com/\nCaptura 屏幕录制 https://mathewsachin.github.io/Captura/\nwinscp ssh远程工具 https://winscp.net/eng/docs/lang:chs\ntodesk 远程控制 https://www.todesk.com/\ntypora markdown文档 https://typora.io/\nRobo 3T mongodb管理 https://robomongo.org/#\n7zip 文件压缩 https://www.7-zip.org/\n有道云笔记 笔记 https://note.youdao.com/\nVirtualBox 虚拟机 https://www.virtualbox.org/\n\n","categories":["其他"],"tags":[]},{"title":"redis 哨兵配置","url":"/redis.html","content":"安装yum 安装yum install redis\n\n服务管理启动\nservice redis start\n\n停止\nservice redis stop\n\n重启\nservice redis restart\n\n配置配置允许外部访问配置文件位于 /etc/redis.conf\n# 修改成允许外部连接访问bind 0.0.0.0\n\n配置主从只需要修改从服务器的配置文件即可\n# 设置主服务的ip和端口slaveof 192.168.31.200 6379\n\n配置哨兵配置文件位于 /etc/redis-sentinel.conf\n# 修改成允许外部连接访问bind 0.0.0.0# mymaster：自定义的参数，用来定义 master 别名，供其他参数使用# 192.168.31.201: master 的 ip# 6379：master 的端口# 2： 表示至少 2 台哨兵认为 master 不可访问，才认定 master 故障，再进行故障转移sentinel monitor mymaster 192.168.31.201 6379 2\n\n启动哨兵\n# &amp; 表示后台启动redis-sentinel /etc/redis-sentinel.conf &amp;\n\n检测哨兵下面的 mymaster 为上文配置的 master 别名\n# 获取当前主节点信息地址信息SENTINEL get-master-addr-by-name mymaster# 获取主节点信息SENTINEL MASTER mymaster# 获取从节点信息SENTINEL slaves mymaster# 获取其他哨兵信息SENTINEL sentinels mymaster\n\n参考链接官方主从模式文档: https://redis.io/topics/replication官方哨兵模式文档: https://redis.io/topics/sentinel\n","categories":["数据库"],"tags":["redis"]},{"title":"nginx高可用搭建","url":"/nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E6%90%AD%E5%BB%BA.html","content":"环境信息\n\n\nip\n软件\n\n\n\n192.168.1.201\nnginx、keepalived\n\n\n192.168.1.202\nnginx、keepalived\n\n\nkeepalived 配置master主节点配置\nglobal_defs &#123;  # Keepalived process identifier  router_id nginx&#125;# Script to check whether Nginx is running or notvrrp_script check_nginx &#123;  script &quot;/bin/check_nginx.sh&quot;  interval 2  weight 50&#125;# state: MASTER(主)/BACKUP(备)# interface: 网卡，ip add 命令查看# virtual_router_id: vrrp_instance的唯一IDvrrp_instance VI_01 &#123;  state MASTER  interface enp0s3  virtual_router_id 151  priority 110  # 虚拟ip  virtual_ipaddress &#123;    192.168.31.50/24  &#125;  # 调用的脚本  track_script &#123;    check_nginx  &#125;  authentication &#123;    auth_type AH    auth_pass secret  &#125;&#125;\n\n参考链接nginx+keepalived高可用搭建： https://www.linuxtechi.com/setup-highly-available-nginx-keepalived-linux/\n","categories":["linux"],"tags":["nginx","keepalived"]},{"title":"jar 包装成 windows 服务","url":"/jar%E6%B3%A8%E5%86%8C%E5%88%B0windows%E6%9C%8D%E5%8A%A1.html","content":"下载 Windows Service Wrapper下载地址：https://github.com/winsw/winsw\n使用复制 WinSW.NET4.exe 到 jar 文件同级目录，并改名为jar的相同文件名\n在同目录创建xml配置文件，与 jar文件同名， 内容如下\n&lt;configuration&gt;&lt;id&gt;test&lt;/id&gt;&lt;name&gt;test&lt;/name&gt;&lt;description&gt;This is test jar.&lt;/description&gt;&lt;executable&gt;java&lt;/executable&gt;&lt;arguments&gt;-Xms512m -Xmx512m -jar  test.jar --spring.profiles.active=dev&lt;/arguments&gt;&lt;!-- 开机启动 --&gt;&lt;startmode&gt;Automatic&lt;/startmode&gt;&lt;logpath&gt;./logs&lt;/logpath&gt;&lt;log mode=&quot;roll-by-time&quot;&gt;&lt;pattern&gt;yyyyMMdd&lt;/pattern&gt;&lt;/log&gt;&lt;/configuration&gt;\n\n运行 cmd 命令注册成 windows 服务\ntest.exe install\n\n使用# 启动命令net start test# 停止命令net stop test# 卸载命令, 如果卸载不了，使用管理员模式打开cmd再运行sc delete test\n\n参考链接https://www.cnblogs.com/wangchaonan/p/12102150.html\n","categories":["java"],"tags":["jar"]},{"title":"idea 快捷键","url":"/idea%E5%BF%AB%E6%8D%B7%E9%94%AE.html","content":"代码相关\n\n\n快捷键\n说明\n\n\n\nAlt+Insert\nget、set等代码生成\n\n\nCtrl+O\n重写或实现方法\n\n\nCtrl+Alt+T\ntrycatch等快捷方式\n\n\nCtrl+Alt+L\n代码格式化\n\n\nCtrl+Alt+O\n删除无用的import\n\n\nCtrl+Shift+U\n大小写转换\n\n\n搜索\n\n\n快捷键\n说明\n\n\n\n双击Shift\n搜索任何位置\n\n\nCtrl+N\n查找类名\n\n\nCtrl+Shift+N\n查找文件名\n\n\nCtrl+F\n搜索当前文件的代码\n\n\nCtrl+Shift+F\n搜索全部文件的代码\n\n\nCtrl+R\n替换当前文件的代码\n\n\nCtrl+Shift+R\n替换全部文件的代码\n\n\n跳转\n\n\n快捷键\n说明\n\n\n\nCtrl+G\n跳转到指定行\n\n\nCtrl+E\n跳转到上一个文件\n\n\nCtrl+Shift+Backspcace\n跳转到上一次修改代码的地方\n\n\nAlt+↓↑\n跳转到下或上个方法\n\n\nAlt+]/[\n跳转到括号的开始或结尾\n\n\nF2/Shift+F2\n跳转到下/上一个高亮错误提示位置\n\n\nF4\n跳转到定义的位置\n\n\nF11\n添加备注\n\n\nCtrl+F11\n添加备注，并打上数字标记\n\n\nCtrl+0-9\n跳转到备注位置\n\n\nShift+F11 / Alt+2\n显示备注列表弹框/侧边栏\n\n\nCtrl+Tab\n显示当前打开的文件弹框\n\n\n类相关\n\n\n\n快捷键\n说明\n\n\n\nAlt+F7\n查看字段，方法，类的所有使用过地方\n\n\nCtrl+Shift+I\n弹框显示定义的代码(不需要跳转到源文件)\n\n\nAlt+7/Ctrl+F12\n侧边/弹框查看当前类的类结构(构造器，属性，方法)\n\n\nCtrl+H\n查看当前类的继承关系\n\n\nCtrl+Shift+H\n查看当前方法的子类重写\n\n\n\n官方快捷键参考\n","categories":["编辑器"],"tags":["idea"]},{"title":"本地 yum 安装","url":"/centos%E6%9C%AC%E5%9C%B0yum%E5%AE%89%E8%A3%85.html","content":"安装yum install yum-plugin-downloadonly\n\n使用# 创建用来存 rpm 包的文件夹mkdir /data/rpm -p# 下载 keepalived 的 rpm 及依赖的 rpm 包到 /data/rpm m目录下yum install –downloadonly –downloaddir=/data/rpm keepalived# 安装 keepalivedcd /data/rpm/yum localinstall *.rpm -y\n\n\n\n\n参考链接https://www.cnblogs.com/nmap/p/9511848.html\n","categories":["linux"],"tags":["centos","yum"]},{"title":"docker 常用命令","url":"/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","content":"镜像命令查看本地镜像docker images [options]\n\n-a 列出本地所有镜像\n-q 只显示镜像id\n–digest 显示摘要信息\n–no-trunc 显示所有信息\n\n搜索远程镜像docker search [options] 镜像名\n\n–no-trunc 显示所有信息\n-s 列出收藏数不少于指定值的镜像\n–automated 只列出 automated build 类型的镜像\n\n下载远程镜像docker pull 镜像名字[:TAG]\n删除本地镜像删除单个\ndocker rmi -f 镜像id\n\n删除多个\ndocker rmi -f 镜像名1:TAG 镜像名2:TAG\n\n删除全部\ndocker rmi -f $&#123;docker images -qa&#125;\n\n容器命令新建并启动容器docker run [options] 镜像 [COMMAND][ARG...]\n\n–name=”容器新名字”: 为容器指定一个名称\n-d: 后台运行容器\n-i: 以交互模式运行，与-t一起使用\n-t: 为容器重新分配一个伪输入终端，与 -i 一起使用\n-p: 指定端口映射，有四种格式\n\nip:hostPort:containerPortip::containerPorthostPort:containerPortcontainerPort\n\n列出运行的容器docker ps [options]\n\n\n-a :列出当前所有正在运行的容器+历史上运行过的\n\n-l :显示最近创建的容器。\n\n-n：显示最近n个创建的容器。\n\n-q :静默模式，只显示容器编号。\n\n–no-trunc :不截断输出。\n\n\n退出容器exit\n\n启动容器docker start 容器id或容器名\n\n重启容器docker restart 容器id或容器名\n\n关闭容器docker stop 容器id或容器名\n\n强制关闭容器docker kill 容器id或容器名\n\n删除已停止的容器## 删除单个docker rm 容器id## 删除多个docker rm -f $&#123;docker ps -a -q&#125;\n\n与已启动的容器交互## 在容器中打开新终端docker exec -it 容器id 命令## 直接使用容器中的终端docker attach 容器id\n\n从容器拷贝文件到主机docker cp 容器id:容器内路径 本机路径\n\n提交镜像docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 要生成的镜像名:[标签名]\n\n查看占用空间docker system df -v\n\n删除未使用的镜像docker image prune\n\n删除未使用的容器docker container prune\n\n","categories":["linux"],"tags":["docker"]},{"title":"centos 升级 openssh","url":"/centos%E5%8D%87%E7%BA%A7openssh.html","content":"安装telnet备用（可选)安装新的ssh之后，只要配置好启动，就可以做到无缝切换，但是中途断开就不能连接了，为了防止这种情况，我们可以安装telnet当作备用，若是你能保证中途不会断开，此步骤可以忽略\n\n安装\nyum install telnet telnet-server -y\n启动\n[root@localhost openssh]# systemctl enable telnet.socketCreated symlink from /etc/systemd/system/sockets.target.wants/telnet.socket to /usr/lib/systemd/system/telnet.socket.[root@localhost openssh]# systemctl start telnet.socket\n连接\n# 创建临时登录的用户[root@localhost openssh]# useradd testuser[root@localhost openssh]# passwd testuserChanging password for user testuser.New password:BAD PASSWORD: The password is shorter than 8 charactersRetype new password:passwd: all authentication tokens updated successfully.# 本地测试[root@localhost openssh]# telnet 127.0.0.1Trying 127.0.0.1...Connected to 127.0.0.1.Escape character is &#x27;^]&#x27;.Kernel 3.10.0-1160.el7.x86_64 on an x86_64localhost login: testuserPassword:# 切换 root 账号[testuser@localhost ~]$ su rootPassword:[root@localhost testuser]#\n\n升级 openssh下载地址https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.0p1.tar.gz\n安装依赖包\nyum install zlib-devel  openssl-devel  pam-devel gcc-c++ -y\n\n备份\n[root@localhost openssh]# mkdir /etc/ssh_old[root@localhost openssh]# mv /etc/ssh/* /etc/ssh_old/\n\n解压、编译安装\n# 解压[root@localhost openssh]# tar xzvf openssh-9.0p1.tar.gz[root@localhost openssh]# cd openssh-9.0p1# 编译安装[root@localhost openssh-9.0p1]# ./configure --prefix=/usr/ --sysconfdir=/etc/ssh --with-ssl-dir=/usr/local/lib64/ --with-zlib --with-pam --with-md5-password --with-ssl-engine --with-selinux[root@localhost openssh-9.0p1]# make &amp;&amp; make install# 验证[root@localhost openssh-9.0p1]# ssh -VOpenSSH_9.0p1, OpenSSL 1.0.2k-fips  26 Jan 2017\n\n配置1.修改sshd_config\n# 修改 PermitRootLogin，允许使用 root 远程登录PermitRootLogin yes\n\n2.启动\n# 移走以前的ssh服务, 防止与新的冲突[root@localhost openssh-9.0p1]# mv /usr/lib/systemd/system/sshd.service /etc/ssh_old/sshd.service[root@localhost openssh-9.0p1]# mv /usr/lib/systemd/system/sshd.socket /etc/ssh_old/sshd.socket# 在解压包中拷贝一些文件[root@localhost openssh-9.0p1]# cp -a contrib/redhat/sshd.init /etc/init.d/sshd# 重启[root@localhost openssh-9.0p1]# service sshd restartReloading systemd:                                         [  OK  ]Restarting sshd (via systemctl):                           [  OK  ][root@localhost openssh-9.0p1]# systemctl daemon-reload# 添加自启动[root@localhost openssh-9.0p1]# chkconfig --add sshd[root@localhost openssh-9.0p1]# chkconfig sshd on\n\n关闭 telnetsystemctl stop telnet.socketsystemctl disable telnet.socket\n\n参考地址https://segmentfault.com/a/1190000022756834\n","categories":["linux"],"tags":["centos"]},{"title":"centos7.9 降级 7.5","url":"/centos7.9%E9%99%8D%E7%BA%A77.5.html","content":"centos7.9 降级 7.5下载 Centos 7.5 的rpm包\nwget --no-check-certificate https://www.repo.cloudlinux.com/cloudlinux/migrate/release-files/centos/7/x86_64/centos-release-7-5.1804.el7.centos.x86_64.rpm\n\n安装\nrpm -Uvh --oldpackage centos-release-7-5.1804.el7.centos.x86_64.rpm\n\n重启\nreboot\n\n参考链接https://www.its203.com/article/weixin_45214930/118481574\n","categories":["linux"],"tags":["centos"]},{"title":"idea常用插件","url":"/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6.html","content":"快捷搜索接口【RestfulTool】快捷搜索接口，及简化版的postman功能\n\n\nmybatis插件【MybatisCodeHelperPro】mybatis提示跳转的等，免费功能已满足日常使用\n快捷键提示【Key Promoter X】常用快捷键提示及设置,多次操作idea上某个功能后会在右下角提示该功能的快捷键\nmvn插件【MavenHelper】mvn快捷键\n翻译【Translation】翻译\ngit提交记录【GitToolBox】显示每一行代码由谁提交\n驼峰转换【CamelCase】驼峰下划线等风格转换\njson字符串转对象【GsonFormatPlus】json文本自动生成javaBean\n对象转json字符串【POJO to JSON】javabean转json字符串\n背景图【Background Images Plus +】编辑器背景图\n","categories":["编辑器"],"tags":["idea"]},{"title":"xml 自动转 javabean","url":"/xml%E8%BD%ACjavabean.html","content":"根据 xml 生成 xsd 文件使用 idea 打开 xml 文件, 鼠标右键点击, 然后点击如下图位置生成 xsd 文件, 注意要选择 local elements/types\n\n\n根据 xsd 生成带有 jaxb 注解的 javabean\n\njaxb 工具类import javax.xml.bind.JAXBContext;import javax.xml.bind.Marshaller;import javax.xml.bind.Unmarshaller;import java.io.StringReader;import java.io.StringWriter;public class JaxbUtil &#123;  /**   * JavaBean转换成xml   * 默认编码UTF-8   * @param obj   * @param writer   * @return   */  public static String convertToXml(Object obj) &#123;    return convertToXml(obj, &quot;UTF-8&quot;);  &#125;  /**   * JavaBean转换成xml   * @param obj   * @param encoding   * @return   */  public static String convertToXml(Object obj, String encoding) &#123;    String result = null;    try &#123;      JAXBContext context = JAXBContext.newInstance(obj.getClass());      Marshaller marshaller = context.createMarshaller();      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);      marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);      StringWriter writer = new StringWriter();      marshaller.marshal(obj, writer);      result = writer.toString();    &#125; catch (Exception e) &#123;      e.printStackTrace();    &#125;    return result;  &#125;  /**   * xml转换成JavaBean   * @param xml   * @param c   * @return   */  @SuppressWarnings(&quot;unchecked&quot;)  public static &lt;T&gt; T converyToJavaBean(String xml, Class&lt;T&gt; c) &#123;    T t = null;    try &#123;      JAXBContext context = JAXBContext.newInstance(c);      Unmarshaller unmarshaller = context.createUnmarshaller();      t = (T) unmarshaller.unmarshal(new StringReader(xml));    &#125; catch (Exception e) &#123;      e.printStackTrace();    &#125;    return t;  &#125;&#125;\n\n测试import com.caac.imf.api.IMFClient;import com.caac.imf.api.IMFClientFactory;import com.chun.test.xml.JaxbUtil;import com.chun.test.xml.MSG;/** * @Author chun * @Date 2019/7/26 10:58 */public class test &#123;    public static void main(String[] args) &#123;        String xml = &quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot;?&gt;&quot; +                &quot;&lt;MSG&gt;&quot; +                &quot;    &lt;META&gt;&quot; +                &quot;        &lt;SNDR&gt;FIMS&lt;/SNDR&gt;&quot; +                &quot;        &lt;RCVR&gt;&lt;/RCVR&gt;&quot; +                &quot;        &lt;SEQN&gt;1&lt;/SEQN&gt;&quot; +                &quot;        &lt;DDTM&gt;2010010223000&lt;/DDTM&gt;&quot; +                &quot;        &lt;TYPE&gt;DFOE&lt;/TYPE&gt;&quot; +                &quot;        &lt;STYP&gt;DFDE&lt;/STYP&gt;&quot; +                &quot;    &lt;/META&gt;&quot; +                &quot;    &lt;DFLT&gt;&quot; +                &quot;        &lt;FLID&gt;657423&lt;/FLID&gt;&quot; +                &quot;        &lt;FFID&gt;3U-8898-20100103081030-A&lt;/FFID&gt;&quot; +                &quot;        &lt;FLTK&gt;W/Z&lt;/FLTK&gt;&quot; +                &quot;    &lt;/DFLT&gt;&quot; +                &quot;&lt;/MSG&gt;&quot;;        MSG msg = JaxbUtil.converyToJavaBean(xml, MSG.class);        System.out.println(msg.getDFLT().getFFID());        String res = JaxbUtil.convertToXml(msg);        System.out.println(res);    &#125;&#125;\n\n输出结果\n3U-8898-20100103081030-A&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;MSG&gt;    &lt;META&gt;        &lt;SNDR&gt;FIMS&lt;/SNDR&gt;        &lt;RCVR&gt;&lt;/RCVR&gt;        &lt;SEQN&gt;1&lt;/SEQN&gt;        &lt;DDTM&gt;2010010223000&lt;/DDTM&gt;        &lt;TYPE&gt;DFOE&lt;/TYPE&gt;        &lt;STYP&gt;DFDE&lt;/STYP&gt;    &lt;/META&gt;    &lt;DFLT&gt;        &lt;FLID&gt;657423&lt;/FLID&gt;        &lt;FFID&gt;3U-8898-20100103081030-A&lt;/FFID&gt;        &lt;FLTK&gt;W/Z&lt;/FLTK&gt;    &lt;/DFLT&gt;&lt;/MSG&gt;\n\n\n\n参考链接：https://blog.csdn.net/qq_36874292/article/details/88687945\n","categories":["编辑器"],"tags":["idea","xml"]},{"title":"表单校验","url":"/%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C.html","content":"简介为什么要用传统的表单校验需要使用大量的ifelse,这样虽然可以实现校验的功能，但是确实代码的可读性非常的差，而且，如下图：\n\n使用简单使用引入 maven 依赖\n&lt;dependency&gt;\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\t&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&lt;/dependency&gt;\n\n创建验证对象\nimport lombok.Data;import javax.validation.constraints.NotBlank;import javax.validation.constraints.Pattern;import java.io.Serializable;@Datapublic class TestForm &#123;    @NotNull(message = &quot;日期不能为空&quot;)    private Date Date;    @NotBlank(message = &quot;进出不能为空&quot;)    private String io;    @NotNull(message = &quot;类型不能为空&quot;)    private Integer type;&#125;\n\n使用@Valid校验, 并将结果存在BindingResult中\npublic R test(@Valid @RequestBody TestForm test, BindingResult bindingResult) &#123;    if(bindingResult.hasErrors())&#123;        for (ObjectError objectError: bindingResult.getAllErrors()) &#123;            return R.error(objectError.getDefaultMessage());        &#125;    &#125;    return R.ok();&#125;\n\n内部类校验在要校验的属性上加上 @Valid 注解\nimport lombok.Data;import javax.validation.Valid;import java.util.Date;import java.util.List;@Datapublic class UserVO &#123;    /**     * 男性用户     */    @Valid    private List&lt;User&gt; mans;    /**     * 女性用户     */    @Valid    private List&lt;User&gt; womans;    @Data    public static class UserVO &#123;        /**         * id         */        private Long id;        /**         * 姓名         */        @NotBlank(message = &quot;姓名不能为空&quot;)        private String name;    &#125;&#125;\n\nspring 统一异常处理全局异常拦截器import cn.hutool.core.util.StrUtil;import com.itran.fgoc.common.core.api.Response;import com.itran.fgoc.common.core.api.ResultCode;import lombok.extern.slf4j.Slf4j;import org.springframework.core.Ordered;import org.springframework.core.annotation.Order;import org.springframework.dao.DuplicateKeyException;import org.springframework.validation.BindException;import org.springframework.validation.FieldError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RestControllerAdvice;import javax.validation.ConstraintViolationException;@RestControllerAdvice@Order(Ordered.HIGHEST_PRECEDENCE)@Slf4jpublic class MyGlobalExceptionHandler &#123;    @ExceptionHandler(value = ApiException.class)    public Response handle(ApiException e) &#123;        if (e.getErrorCode() != null) &#123;            if(StrUtil.isNotBlank(e.getMsg()))&#123;                log.info(e.getMsg(), e);                return Response.failed(e.getErrorCode(), e.getMsg());            &#125;            return Response.failed(e.getErrorCode());        &#125;        log.info(e.getMessage(), e);        return Response.failed(e.getMessage());    &#125;    @ExceptionHandler(value = BindException.class)    public Response validExceptionHandler(BindException e) &#123;        log.info(e.getMessage(), e);        FieldError fieldError = e.getBindingResult().getFieldError();        return Response.failed(ResultCode.VALIDATE_FAILED, fieldError.getDefaultMessage());    &#125;    @ExceptionHandler(value = ConstraintViolationException.class)    public Response constraintViolationExceptionHandler(ConstraintViolationException e) &#123;        log.info(e.getMessage(), e);        return Response.failed(ResultCode.VALIDATE_FAILED, e.getConstraintViolations().iterator().next().getMessage());    &#125;    @ExceptionHandler(value = &#123;MethodArgumentNotValidException.class&#125;)    public Response methodArgumentNotValidHandler(MethodArgumentNotValidException e) &#123;        log.info(e.getMessage(), e);        FieldError fieldError = e.getBindingResult().getFieldError();        return Response.failed(ResultCode.VALIDATE_FAILED, fieldError.getDefaultMessage());    &#125;    @ExceptionHandler(value = &#123;DuplicateKeyException.class&#125;)    public Response handleDuplicateKeyException(DuplicateKeyException e) &#123;        log.error(e.getMessage(), e);        return Response.failed(ResultCode.DUPLICATE_KEY);    &#125;    @ExceptionHandler(value = &#123;Exception.class&#125;)    public Response handle(Exception e) &#123;        log.error(e.getMessage(), e);        return Response.failed(ResultCode.FAILED);    &#125;&#125;\n\n业务统一异常import com.itran.fgoc.common.core.api.IErrorCode;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@NoArgsConstructor@AllArgsConstructorpublic class ApiException extends RuntimeException &#123;    /**     * 异常码     */    private IErrorCode errorCode;    /**     * 自定义错误描述     */    private String msg;    /**     * Instantiates a new Api exception.     *     * @param iErrorCode the error code     */    public ApiException(IErrorCode iErrorCode)&#123;        this.errorCode = iErrorCode;    &#125;&#125;\n\n统一异常码接口public interface IErrorCode &#123;    /**     * 异常编码     * @return     */    long getCode();    /**     * 异常信息     * @return     */    String getMessage();&#125;\n\n统一异常码实现类import lombok.AllArgsConstructor;import lombok.Getter;import lombok.NoArgsConstructor;@Getter@NoArgsConstructor@AllArgsConstructorpublic enum ResultCode implements IErrorCode &#123;    SUCCESS(200, &quot;操作成功&quot;),    FAILED(500, &quot;操作失败&quot;),    UNAUTHORIZED(401, &quot;暂未登录或token已经过期&quot;),    VALIDATE_FAILED(402, &quot;参数检验失败&quot;),    FORBIDDEN(403, &quot;没有相关权限&quot;),    LOGIN_FAILED(405, &quot;登录失败,帐号或密码错误&quot;),    LOGIN_CODE_TIMEOUT(405, &quot;登录失败,验证码已过期&quot;),    LOGIN_CODE_FAILED(405, &quot;登录失败,验证码输入错误&quot;),    DATA_IS_NULL(501, &quot;操作的数据异常&quot;),    REMOTE_CALL_FAILED(502, &quot;远程调用失败&quot;),    INSERT_ERROR(5000,&quot;插入数据失败！&quot;),    UPDATE_ERROR(5001,&quot;修改数据失败！&quot;),    DELETE_ERROR(5002,&quot;删除数据失败！&quot;),    DUPLICATE_KEY(5003,&quot;数据已存在！&quot;),    // 1001 用户相关    CODE_1001001(1001001, &quot;用户不存在&quot;),    CODE_1001002(1001002, &quot;用户名不能为空&quot;),    // 1002 权限相关    CODE_1002001(1002001, &quot;无操作权限&quot;),    ;    private long code;    private String message;&#125;\n\n\n\n\n\n自定义表单校验注解import com.itran.fgoc.common.core.var.NullVar;import java.lang.annotation.Documented;import java.lang.annotation.ElementType;import java.lang.annotation.Repeatable;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;import javax.validation.Constraint;import javax.validation.Payload;/** * 校验字段是否是枚举中，null值不校验 * 校验顺序：intEnumValues -&gt; longEnumValues -&gt; stringEnumValues -&gt; enumClass */@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)@Retention(RetentionPolicy.RUNTIME)@Repeatable(Enum.List.class)@Documented@Constraint(    validatedBy = EnumValidator.class)public @interface Enum &#123;    String message() default &quot;枚举字段不正确&quot;;    Class&lt;?&gt; enumClass() default NullVar.class;    int[] intEnumValues() default &#123;&#125;;    long[] longEnumValues() default &#123;&#125;;    String[] stringEnumValues() default &#123;&#125;;    Class&lt;?&gt;[] groups() default &#123;&#125;;    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;    @Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)    @Retention(RetentionPolicy.RUNTIME)    @Documented    public @interface List &#123;        Enum[] value();    &#125;&#125;\n\n注解解析器import cn.hutool.core.util.ArrayUtil;import cn.hutool.core.util.ReflectUtil;import javax.validation.ConstraintValidator;import javax.validation.ConstraintValidatorContext;import java.util.Arrays;public class EnumValidator implements ConstraintValidator&lt;Enum, Object&gt; &#123;    private Object[] enumValues;    private int[] intEnumValues;    private long[] longEnumValues;    private String[] stringEnumValues;    public EnumValidator() &#123;    &#125;    @Override    public void initialize(Enum constraintAnnotation) &#123;        enumValues = ReflectUtil.getFieldsValue(constraintAnnotation.enumClass());        intEnumValues = constraintAnnotation.intEnumValues();        longEnumValues = constraintAnnotation.longEnumValues();        stringEnumValues = constraintAnnotation.stringEnumValues();    &#125;    public boolean isValid(Object object, ConstraintValidatorContext constraintValidatorContext) &#123;        if(object == null)&#123;            return true;        &#125;        if(!ArrayUtil.isEmpty(intEnumValues))&#123;            return ArrayUtil.contains(intEnumValues, (int)object);        &#125;        if(!ArrayUtil.isEmpty(longEnumValues))&#123;            return ArrayUtil.contains(longEnumValues, (long)object);        &#125;        if(!ArrayUtil.isEmpty(stringEnumValues))&#123;            return ArrayUtil.contains(stringEnumValues, (long)object);        &#125;        return Arrays.asList(enumValues).contains(object);    &#125;&#125;\n\n枚举示例import cn.hutool.core.map.MapUtil;import java.util.Map;public interface ContainerTypeVar&#123;    /**     * 轮廓     */    interface Contour &#123;        int RECTANGULAR_SOLID = 0;        int LOWER_LEFT_TRAPEZOID = 1;        int UPPER_LEFT_TRAPEZOID = 2;        int LOWER_TRAPEZOID = 3;        int UPPER_TRAPEZOID = 4;        Map&lt;Object, Object&gt; MSG = MapUtil.builder()                .put(RECTANGULAR_SOLID, &quot;长方体&quot;)                .put(LOWER_LEFT_TRAPEZOID, &quot;单切左下&quot;)                .put(UPPER_LEFT_TRAPEZOID, &quot;单切左上&quot;)                .put(LOWER_TRAPEZOID, &quot;双切下&quot;)                .put(UPPER_TRAPEZOID, &quot;双切上&quot;)                .build()                ;    &#125;&#125;\n\nNullVarpublic interface NullVar &#123;&#125;\n\n使用// 4种方式任选其一，优先级从上往下// 使用自定义int数组校验@Enum(intEnumValues = &#123;1,2&#125;, message = &quot;轮廓数据异常&quot;)private Integer contour;// 使用自定义long数组校验@Enum(longEnumValues = &#123;1,2&#125;, message = &quot;轮廓数据异常&quot;)private Integer contour;// 使用自定义string数组校验@Enum(stringEnumValues = &#123;&quot;1&quot;,&quot;2&quot;&#125;, message = &quot;轮廓数据异常&quot;)private Integer contour;// 使用枚举类校验@Enum(enumClass = ContainerTypeVar.Contour.class, message = &quot;轮廓数据异常&quot;)private Integer contour;\n\n默认表单校验\n\n\n限制\n说明\n\n\n\n@Null\n限制只能为null\n\n\n@NotNull\n限制必须不为null\n\n\n@AssertFalse\n限制必须为false\n\n\n@AssertTrue\n限制必须为true\n\n\n@DecimalMax(value)\n限制必须为一个不大于指定值的数字\n\n\n@DecimalMin(value)\n限制必须为一个不小于指定值的数字\n\n\n@Digits(integer,fraction)\n限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction\n\n\n@Future\n限制必须是一个将来的日期\n\n\n@Max(value)\n限制必须为一个不大于指定值的数字\n\n\n@Min(value)\n限制必须为一个不小于指定值的数字\n\n\n@Past\n限制必须是一个过去的日期\n\n\n@Pattern(regexp)\n限制必须符合指定的正则表达式\n\n\n@Size(max,min)\n限制字符长度必须在min到max之间\n\n\n@Past\n验证注解的元素值（日期类型）比当前时间早\n\n\n@NotEmpty\n验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）\n\n\n@NotBlank\n验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格\n\n\n@Email\n验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式\n\n\n参考链接https://www.cnblogs.com/cjsblog/p/8946768.htmlhttps://www.jianshu.com/p/8ea600893d87\n","categories":["java"],"tags":["springboot"]},{"title":"","url":"/about/index.html","content":"","categories":[],"tags":[]}]