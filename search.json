[{"title":"","url":"/2022/09/05/%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82%E7%A6%81%E7%94%A8/","content":"\n\n\n\n\n防重复提交\n说明\n使用\n\n\n\n\n防重复提交说明在接口方法上添加 @RepeatSubmit 注解即可，注解参数说明：| 参数  |  类型 |  描述 ||—|—|—||  value | int  |  间隔时间(秒)，小于此时间视为重复提交\n使用用户工作情况同一个用户 1 秒内只允许请求此接口一次\n@RepeatSubmit(1)@GetMapping(&quot;/workSituation&quot;)@ApiOperation(value = &quot;用户工作情况&quot;)@ApiImplicitParams(&#123;        @ApiImplicitParam(paramType = &quot;query&quot;, name = &quot;runningDay&quot;, value = &quot;运行日&quot;, dataType = &quot;string&quot;, defaultValue = &quot;2022-06-11&quot;),&#125;)public ResultBean&lt;UserWorkSituationVO&gt; userWorkSituation(@RequestParam(value = &quot;runningDay&quot;, required = false) @DateTimeFormat(pattern = DatePattern.NORM_DATE_PATTERN) Date runningDay)&#123;    return ResultBean.success(pdaDriverService.userWorkSituation(runningDay));&#125;\n\n如果多次提交，返回：\n&#123;  &quot;code&quot;: 6001,  &quot;message&quot;: &quot;请勿重复提交！&quot;,  &quot;data&quot;: null,  &quot;success&quot;: false&#125;\n\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BB%BA%E8%A1%A8%E8%A7%84%E8%8C%83/","content":"数据库建表规范","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85swagger%E6%8F%8F%E8%BF%B0/","content":"\n\n\n\n\n枚举类型自动填充swagger描述\n说明\n使用示例\n实现效果\n\n\n\n\n\n\n枚举类型自动填充swagger描述后端的枚举类型可能会在多个swagger实体类中使用，更新枚举数据时容易忘记更新swagger文档，所以可以使用自定义注解方式自动的生成枚举字段的描述信息。\n说明使用 @ApiModelEnumProperty 注解实现, 除新增的 enumClass 属性外, 与 @ApiModelProperty 完全一致\n使用示例swagger请求param\n@Data@ApiModel(value = &quot;demo 更新/新增 请求参数&quot;)public class DemoSaveUpdateParam &#123;    @ApiModelProperty(value = &quot;是否有效(0无效，1有效)&quot;)    private Integer effectiveFlag;    @ApiModelProperty(value = &quot;金额&quot;)    private BigDecimal amount;    @ApiModelEnumProperty(enumClass = DemoVar.Type.class, value = &quot;类型&quot;)    private Integer type;&#125;\n\nDemoVar 枚举类\npublic interface DemoVar &#123;    /**     * 类型(1正式版，2测试版，3：开发版)     */    interface Type &#123;        int OFFICIAL = 1;        int BETA = 2;        int DEVELOPMENT = 3;        Enums SCOPE = Enums.build()                .add(OFFICIAL, &quot;正式版&quot;)                .add(BETA, &quot;测试版&quot;)                .add(DEVELOPMENT, &quot;开发版&quot;);    &#125;&#125;\n\n实现效果\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/","content":"\n\n\n\n\n工具文档\n\n\n\n工具文档\n防重复提交: doc/开发文档/防重复提交.md\n\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/","content":"\n\n\n\n\n代码生成器说明文档\n使用\n部署方法\n引入 pom 文件\n编写模板文件\n编写 yml 文件\n\n\n\n\n\n\n\n代码生成器说明文档使用访问地址：http://localhost:8999/generate.html\n生成代码\n查看生成结果\n部署方法引入 pom 文件&lt;dependency&gt;    &lt;groupId&gt;com.itran.fgoc&lt;/groupId&gt;    &lt;artifactId&gt;common-generate&lt;/artifactId&gt;&lt;/dependency&gt;\n\n编写模板文件用于生成自定义的文件，放置与 resource/template 目录下即可读取到。模板文件是以 freemarker 格式编写, 示例文件位于 doc/代码生成器示例文件 目录下，可以直接复制到项目的 resource 目录下使用.\n模板文件中可使用的变量如下\n\n\n\n字段\n说明\n\n\n\npackageName\n当前项目的包名\n\n\nmodule\n模块名，用户通过 web 页面手动录入\n\n\ndir\n配置文件录入,位于 chun.generate.template-map.*.dir\n\n\ntableInfo\n模块名，用户通过 web 页面手动录入\n\n\n—-tableNameCamelCase\n数据库表名小驼峰模式\n\n\n—-tableComment\n数据库表注释\n\n\n—-columnDtos\n字段信息，数组\n\n\n——–columnName\n数据库字段名转成小驼峰格式\n\n\n——–javaType\n数据库字段的java类型\n\n\n——–columnComment\n数据库字段备注\n\n\n——–oldColumnName\n数据库字段名数据库格式\n\n\n编写 yml 文件# 固定前缀chun:  generate:    template-map:      # 生成模板类型，此处可自定义，用于在 web 页面显示不同的生成方式的单选框      all:        # 模板文件名        template-file: poAll.ftl        # 文件夹名        dir: entity/po        # 生成的文件后缀        suffix: .java        # 生成类型，此处只能选择两种，class 或者 resource, 选择 class 的话会生成在 java 包的根目录里面, 选择 resource 则会生成在 resource 资源文件夹        type: class        # 子类型，递归生成文件，此处有BUG,只会识别到第一层的子元素，后续修复        child:          mapper:            template-file: mapperAll.ftl            dir: mapper            suffix: Mapper.java            type: class          mapper-xml:            template-file: mapperXmlAll.ftl            dir: mapper            suffix: Mapper.xml            type: resource\n\n\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/","content":"\n\n\n\n\n快捷搜索接口【RestfulTool】\nmybatis插件【MybatisCodeHelperPro】\n快捷键提示【Key Promoter X】\nmvn插件【MavenHelper】\n翻译【Translation】\ngit提交记录【GitToolBox】\n驼峰转换【CamelCase】\njson字符串转对象【GsonFormatPlus】\n对象转json字符串【POJO to JSON】\n背景图【Background Images Plus +】\n\n\n\n\n快捷搜索接口【RestfulTool】快捷搜索接口，及简化版的postman功能\nmybatis插件【MybatisCodeHelperPro】mybatis提示跳转的等，免费功能已满足日常使用\n快捷键提示【Key Promoter X】常用快捷键提示及设置,多次操作idea上某个功能后会在右下角提示该功能的快捷键\nmvn插件【MavenHelper】mvn快捷键\n翻译【Translation】翻译\ngit提交记录【GitToolBox】显示每一行代码由谁提交\n驼峰转换【CamelCase】驼峰下划线等风格转换\njson字符串转对象【GsonFormatPlus】json文本自动生成javaBean\n对象转json字符串【POJO to JSON】javabean转json字符串\n背景图【Background Images Plus +】编辑器背景图\n","categories":[],"tags":[]},{"title":"表单校验","url":"/2022/09/05/%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/","content":"简介常用注解\n\n\n限制\n说明\n\n\n\n@Null\n限制只能为null\n\n\n@NotNull\n限制必须不为null\n\n\n@AssertFalse\n限制必须为false\n\n\n@AssertTrue\n限制必须为true\n\n\n@DecimalMax(value)\n限制必须为一个不大于指定值的数字\n\n\n@DecimalMin(value)\n限制必须为一个不小于指定值的数字\n\n\n@Digits(integer,fraction)\n限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction\n\n\n@Future\n限制必须是一个将来的日期\n\n\n@Max(value)\n限制必须为一个不大于指定值的数字\n\n\n@Min(value)\n限制必须为一个不小于指定值的数字\n\n\n@Past\n限制必须是一个过去的日期\n\n\n@Pattern(regexp)\n限制必须符合指定的正则表达式\n\n\n@Size(max,min)\n限制字符长度必须在min到max之间\n\n\n@Past\n验证注解的元素值（日期类型）比当前时间早\n\n\n@NotEmpty\n验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）\n\n\n@NotBlank\n验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格\n\n\n@Email\n验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式\n\n\n@Enum\n验证枚举类型(自定义注解)\n\n\n使用通用枚举类使用示例package io.renren.modules.cgo.pda.form;import lombok.Data;import javax.validation.constraints.NotBlank;import javax.validation.constraints.Pattern;import java.io.Serializable;@Datapublic class FlightStatusListForm implements Serializable&#123;    private static final long serialVersionUID = -6714674684353581145L;    @NotBlank(message = &quot;航班时间不能为空&quot;)    private String flightDate;    @NotBlank(message = &quot;航班类型不能为空&quot;)    private String flightIo;    @Enum(enumClass = DemoVar.Type.class, message = &quot;类型不正确&quot;)    @NotNull(message = &quot;类型不能为空&quot;)    private Integer type;&#125;\n\nEnums注解使用示例// 4种方式任选其一，优先级从上往下// 使用自定义int数组校验@Enum(intEnumValues = &#123;1,2&#125;, message = &quot;轮廓数据异常&quot;)private Integer contour;// 使用自定义long数组校验@Enum(longEnumValues = &#123;1,2&#125;, message = &quot;轮廓数据异常&quot;)private Integer contour;// 使用自定义string数组校验@Enum(stringEnumValues = &#123;&quot;1&quot;,&quot;2&quot;&#125;, message = &quot;轮廓数据异常&quot;)private Integer contour;// 使用枚举类校验@Enum(enumClass = ContainerTypeVar.Contour.class, message = &quot;轮廓数据异常&quot;)private Integer contour;\n\n\n内部类校验\n\n摘要校验的内部类属性上加上 @Valid 注解\n","categories":["java"],"tags":["springboot"]},{"title":"","url":"/2022/09/05/xml%E8%BD%ACjavabean/","content":"\n\n\n\n\n根据 xml 生成 xsd 文件\n根据 xsd 生成带有 jaxb 注解的 javabean\njaxb 工具类\n测试\n\n\n\n\n根据 xml 生成 xsd 文件使用 idea 打开 xml 文件, 鼠标右键点击, 然后点击如下图位置生成 xsd 文件, 注意要选择 local elements/types\n\n\n根据 xsd 生成带有 jaxb 注解的 javabean\n\njaxb 工具类import javax.xml.bind.JAXBContext;import javax.xml.bind.Marshaller;import javax.xml.bind.Unmarshaller;import java.io.StringReader;import java.io.StringWriter;/** * Jaxb2工具类 * @author   zhuc * @create   2013-3-29 下午2:40:14 */public class JaxbUtil &#123;  /**   * JavaBean转换成xml   * 默认编码UTF-8   * @param obj   * @param writer   * @return   */  public static String convertToXml(Object obj) &#123;    return convertToXml(obj, &quot;UTF-8&quot;);  &#125;  /**   * JavaBean转换成xml   * @param obj   * @param encoding   * @return   */  public static String convertToXml(Object obj, String encoding) &#123;    String result = null;    try &#123;      JAXBContext context = JAXBContext.newInstance(obj.getClass());      Marshaller marshaller = context.createMarshaller();      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);      marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);      StringWriter writer = new StringWriter();      marshaller.marshal(obj, writer);      result = writer.toString();    &#125; catch (Exception e) &#123;      e.printStackTrace();    &#125;    return result;  &#125;  /**   * xml转换成JavaBean   * @param xml   * @param c   * @return   */  @SuppressWarnings(&quot;unchecked&quot;)  public static &lt;T&gt; T converyToJavaBean(String xml, Class&lt;T&gt; c) &#123;    T t = null;    try &#123;      JAXBContext context = JAXBContext.newInstance(c);      Unmarshaller unmarshaller = context.createUnmarshaller();      t = (T) unmarshaller.unmarshal(new StringReader(xml));    &#125; catch (Exception e) &#123;      e.printStackTrace();    &#125;    return t;  &#125;&#125;\n\n测试import com.caac.imf.api.IMFClient;import com.caac.imf.api.IMFClientFactory;import com.chun.test.xml.JaxbUtil;import com.chun.test.xml.MSG;/** * @Author chun * @Date 2019/7/26 10:58 */public class test &#123;    public static void main(String[] args) &#123;        String xml = &quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot;?&gt;&quot; +                &quot;&lt;MSG&gt;&quot; +                &quot;    &lt;META&gt;&quot; +                &quot;        &lt;SNDR&gt;FIMS&lt;/SNDR&gt;&quot; +                &quot;        &lt;RCVR&gt;&lt;/RCVR&gt;&quot; +                &quot;        &lt;SEQN&gt;1&lt;/SEQN&gt;&quot; +                &quot;        &lt;DDTM&gt;2010010223000&lt;/DDTM&gt;&quot; +                &quot;        &lt;TYPE&gt;DFOE&lt;/TYPE&gt;&quot; +                &quot;        &lt;STYP&gt;DFDE&lt;/STYP&gt;&quot; +                &quot;    &lt;/META&gt;&quot; +                &quot;    &lt;DFLT&gt;&quot; +                &quot;        &lt;FLID&gt;657423&lt;/FLID&gt;&quot; +                &quot;        &lt;FFID&gt;3U-8898-20100103081030-A&lt;/FFID&gt;&quot; +                &quot;        &lt;FLTK&gt;W/Z&lt;/FLTK&gt;&quot; +                &quot;    &lt;/DFLT&gt;&quot; +                &quot;&lt;/MSG&gt;&quot;;        MSG msg = JaxbUtil.converyToJavaBean(xml, MSG.class);        System.out.println(msg.getDFLT().getFFID());        String res = JaxbUtil.convertToXml(msg);        System.out.println(res);    &#125;&#125;\n\n输出结果\n3U-8898-20100103081030-A&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;MSG&gt;    &lt;META&gt;        &lt;SNDR&gt;FIMS&lt;/SNDR&gt;        &lt;RCVR&gt;&lt;/RCVR&gt;        &lt;SEQN&gt;1&lt;/SEQN&gt;        &lt;DDTM&gt;2010010223000&lt;/DDTM&gt;        &lt;TYPE&gt;DFOE&lt;/TYPE&gt;        &lt;STYP&gt;DFDE&lt;/STYP&gt;    &lt;/META&gt;    &lt;DFLT&gt;        &lt;FLID&gt;657423&lt;/FLID&gt;        &lt;FFID&gt;3U-8898-20100103081030-A&lt;/FFID&gt;        &lt;FLTK&gt;W/Z&lt;/FLTK&gt;    &lt;/DFLT&gt;&lt;/MSG&gt;\n\n\n\n参考链接：https://blog.csdn.net/qq_36874292/article/details/88687945\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/redis%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/","content":"\n\n\n\n\nredis 使用文档\n使用\n生成缓存和使用\n删除缓存\n缓存 key 定义位置\nkey 的默认超时时间\n自定义 key 的超时时间\n\n\n部署\n引入 pom 文件\n\n\n\n\n\n\n\nredis 使用文档使用生成缓存和使用在 springbean 的带有返回值的方法上使用 @Cacheable 注解, @Cacheable 的 value 属性就是 redis 缓存的 key，缓存的数据就是方法的返回值\n@Servicepublic class TestServiceImpl&#123;    @Cacheable(value = RedisVar.LIST_USER)    public List&lt;User&gt; listUser()&#123;        // 查询代码        // ...    &#125;&#125;\n\n删除缓存在 springbean 的方法上使用 @CacheEvict 注解, 即可删除对应的缓存\n@Servicepublic class TestServiceImpl&#123;    @CacheEvict(value = RedisVar.LIST_USER)    public void deleteByUserId(Long userId)&#123;        // 删除用户    &#125;&#125;\n\n缓存 key 定义位置位置：统一定义在 com.itran.fgoc.common.redis.var.RedisVar 类中\nkey 的默认超时时间修改 RedisVar.DEFAULT_TTL 的值, 默认6小时\n自定义 key 的超时时间修改 RedisVar.TTL_MAP 的值, 以分钟为单位\n部署引入 pom 文件&lt;dependency&gt;    &lt;groupId&gt;com.itran.fgoc&lt;/groupId&gt;    &lt;artifactId&gt;common-redis&lt;/artifactId&gt;&lt;/dependency&gt;\n\n\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/redis/","content":"\n\n\n\n\n安装\nyum 安装\nrpm 安装\n\n\n服务管理\n配置\n配置允许外部访问\n配置主从\n配置哨兵\n检测哨兵\n\n\n参考链接\n\n\n\n安装yum 安装yum install redis\n\nrpm 安装结构\nredis-3.2.12-2.el7.x86_64.rpm    - jemalloc-3.6.0-1.el7.x86_64.rpm\n\nyum本地安装将 rpm 文件放在一个文件夹，然后运行下列命令安装\nyum localinstall *.rpm -y\n\n服务管理启动\nservice redis start\n\n停止\nservice redis stop\n\n重启\nservice redis restart\n\n配置配置允许外部访问配置文件位于 /etc/redis.conf\n# 修改成允许外部连接访问bind 0.0.0.0\n\n配置主从只需要修改从服务器的配置文件即可\n# 设置主服务的ip和端口slaveof 192.168.31.200 6379\n\n配置哨兵配置文件位于 /etc/redis-sentinel.conf\n# 修改成允许外部连接访问bind 0.0.0.0# mymaster：自定义的参数，用来定义 master 别名，供其他参数使用# 192.168.31.201: master 的 ip# 6379：master 的端口# 2： 表示至少 2 台哨兵认为 master 不可访问，才认定 master 故障，再进行故障转移sentinel monitor mymaster 192.168.31.201 6379 2\n\n启动哨兵\n# &amp; 表示后台启动redis-sentinel /etc/redis-sentinel.conf &amp;\n\n检测哨兵下面的 mymaster 为上文配置的 master 别名\n# 获取当前主节点信息地址信息SENTINEL get-master-addr-by-name mymaster# 获取主节点信息SENTINEL MASTER mymaster# 获取从节点信息SENTINEL slaves mymaster# 获取其他哨兵信息SENTINEL sentinels mymaster\n\n参考链接官方主从模式文档: https://redis.io/topics/replication官方哨兵模式文档: https://redis.io/topics/sentinel\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/proxy%E5%AE%89%E8%A3%85/","content":"\n\n\n\n\n安装\nrpm 安装方式\n\n\n服务管理\n启动\n停止\n重启\n\n\n配置间移动\n配置\n设置账号密码\n添加后端服务器\n组复制 MGR\nmysql 用户\nsql统计\n根据总执行时间找到前 5 个查询\n查询次数最多的 5 条sql\n查询最耗时的 5 条sql\n查找按总执行时间前 5，并且最短执行时间至少为 1 毫秒：\n查找按总执行时间排序的前 5 个查询，平均执行时间至少为 1 秒。还显示总执行时间的百分比：\n查找按总执行时间排序的前 5 个查询，平均执行时间至少为 15 毫秒，并显示占总执行时间的百分比：\n\n\n规则设置\n\n\n集群\nproxy 集群服务器\n设置 proxy 监控账号信息\n查看同步状态\n\n\n参考地址\n\n\n\n安装rpm 安装方式依赖关系\nproxysql-2.2.0-1-centos7.x86_64.rpm    - gnutls-3.3.29-9.el7_6.x86_64.rpm        - nettle-2.7.1-8.el7.x86_64.rpm        - trousers-0.3.14-2.el7.x86_64.rpm    - perl-DBD-MySQL-4.023-6.el7.x86_64.rpm        - mysql-community-libs-compat-5.7.37-1.el7.x86_64.rpm        - perl-DBI-1.627-4.el7.x86_64.rpm            - perl-Data-Dumper-2.145-3.el7.x86_64.rpm            - perl-PlRPC-0.2020-14.el7.noarch.rpm                - perl-IO-Compress-2.061-2.el7.noarch.rpm                    - perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpm                    - perl-Compress-Raw-Zlib-2.061-4.el7.x86_64.rpm                - perl-Net-Daemon-0.48-5.el7.noarch.rpm\n\n安装顺序(参考)\nrpm -ivh perl-Net-Daemon-0.48-5.el7.noarch.rpmrpm -ivh perl-Compress-Raw-Zlib-2.061-4.el7.x86_64.rpmrpm -ivh perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpmrpm -ivh perl-IO-Compress-2.061-2.el7.noarch.rpmrpm -ivh perl-PlRPC-0.2020-14.el7.noarch.rpmrpm -ivh perl-Data-Dumper-2.145-3.el7.x86_64.rpmrpm -ivh perl-DBI-1.627-4.el7.x86_64.rpmrpm -ivh mysql-community-libs-compat-5.7.37-1.el7.x86_64.rpmrpm -ivh perl-DBD-MySQL-4.023-6.el7.x86_64.rpmrpm -ivh trousers-0.3.14-2.el7.x86_64.rpmrpm -ivh nettle-2.7.1-8.el7.x86_64.rpmrpm -ivh gnutls-3.3.29-9.el7_6.x86_64.rpmrpm -ivh proxysql-2.2.0-1-centos7.x86_64.rpm\n\n服务管理启动service proxysql start\n\n停止service proxysql stop\n或者通过管理界面\n# 登录控制台mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt=&#x27;Admin&gt; &#x27;# 停止proxysql stop\n\n重启service proxysql restart\n或者通过管理界面\n# 登录控制台mysql -u admin -padmin -h 127.0.0.1 -P6032 --prompt=&#x27;Admin&gt; &#x27;# 重启proxysql restart\n\n配置间移动整套配置系统分为三层：顶层为 RUNTIME ,中间层为 MEMORY , 底层也就是持久层 DISK 和 CONFIG FILE 。\n\nRUNTIME ： 代表 ProxySQL 当前生效的正在使用的配置，无法直接修改这里的配置，必须要从下一层 “load” 进来。 \nMEMORY： MEMORY 层上面连接 RUNTIME 层，下面连接持久层。这层可以正常操作 ProxySQL 配置，随便修改，不会影响生产环境。修改一个配置一般都是现在 MEMORY 层完成的，确认正常之后在加载达到 RUNTIME 和 持久化的磁盘上。\nDISK 和 CONFIG FILE：持久化配置信息，重启后内存中的配置信息会丢失，所需要将配置信息保留在磁盘中。重启时，可以从磁盘快速加载回来。\n\n配置设置账号密码# 需要在被代理的 mysql 创建监控账号，并分配权限create user &#x27;monitor&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;asAS123456!&#x27;;grant usage,replication client on *.* to monitor@&#x27;%&#x27;;flush privileges;# 查看参数SELECT * FROM global_variables WHERE variable_name LIKE &#x27;mysql-monitor_%&#x27;;# 在 proxysql 数据库设置监控的账号密码UPDATE global_variables SET variable_value=&#x27;monitor&#x27; WHERE variable_name=&#x27;mysql-monitor_username&#x27;;UPDATE global_variables SET variable_value=&#x27;asAS123456!&#x27; WHERE variable_name=&#x27;mysql-monitor_password&#x27;;# 生效并保存LOAD MYSQL VARIABLES TO RUNTIME;SAVE MYSQL VARIABLES TO DISK;\n\n添加后端服务器# 添加服务器INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.200&#x27;,3306);INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.201&#x27;,3306);INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES (1,&#x27;192.168.31.202&#x27;,3306);# 查看服务器Admin&gt; SELECT * FROM mysql_servers;+--------------+----------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+| hostgroup_id | hostname       | port | gtid_port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |+--------------+----------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+| 1            | 192.168.31.200 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         || 2            | 192.168.31.202 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         || 2            | 192.168.31.201 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         || 2            | 192.168.31.200 | 3306 | 0         | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |+--------------+----------------+------+-----------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+4 rows in set (0.00 sec)# 生效并保存LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;\n\n组复制 MGR# 如果 read_only=0 ,  hostgroup 会被设置为 1# 如果 read_only=1 ,  hostgroup 会被设置为 2INSERT INTO mysql_replication_hostgroups (writer_hostgroup,reader_hostgroup,comment) VALUES (1,2,&#x27;cluster1&#x27;);# 生效并保存LOAD MYSQL SERVERS TO RUNTIME;SAVE MYSQL SERVERS TO DISK;# 查看记录Admin&gt; SELECT * FROM monitor.mysql_server_read_only_log ORDER BY time_start_us DESC LIMIT 3;+----------------+------+------------------+-----------------+-----------+-------+| hostname       | port | time_start_us    | success_time_us | read_only | error |+----------------+------+------------------+-----------------+-----------+-------+| 192.168.31.202 | 3306 | 1646721733774003 | 563             | 1         | NULL  || 192.168.31.200 | 3306 | 1646721733755560 | 148             | 0         | NULL  || 192.168.31.201 | 3306 | 1646721733738055 | 588             | 1         | NULL  |+----------------+------+------------------+-----------------+-----------+-------+3 rows in set (0.00 sec)\n\nmysql 用户通过定义 default_hostgroup，我们指定用户应该默认连接到哪些后端服务器（即，这将是来自特定用户的流量的默认路由，可以配置其他规则以重新路由，但是在它们不存在的情况下，所有查询都会去到特定的主机组）\n# 查询select * from mysql_users;# 添加INSERT INTO mysql_users(username,password,default_hostgroup) VALUES (&#x27;remote&#x27;,&#x27;asAS123456!&#x27;,1);# 生效并保存LOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS TO DISK;\n\nsql统计根据总执行时间找到前 5 个查询Admin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+---------------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time      |+--------------------+--------------------------+------------+---------------+| 0x037C3E6D996DAFE2 | SELECT a.ip_id as ip_id, | 2030026798 | 1479082636017 || 0xB081A85245DEA5B7 | SELECT a.ip_id as ip_id, | 2025902778 | 1206116187539 || 0x38BE36BDFFDBE638 | SELECT instance.name as  | 59343662   | 1096236803754 || 0xB4233552504E43B8 | SELECT ir.type as type,  | 1362897166 | 488971769571  || 0x4A131A16DCFFD6C6 | SELECT i.id as id, i.sta | 934402293  | 475253770301  |+--------------------+--------------------------+------------+---------------+5 rows in set (0.01 sec)\n\n查询次数最多的 5 条sqlAdmin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; ORDER BY count_star DESC LIMIT 5;+--------------------+--------------------------+------------+---------------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time      |+--------------------+--------------------------+------------+---------------+| 0x037C3E6D996DAFE2 | SELECT a.ip_id as ip_id, | 2030040688 | 1479092529369 || 0xB081A85245DEA5B7 | SELECT a.ip_id as ip_id, | 2025916528 | 1206123010791 || 0x22E0A5C585C53EAD | SELECT id as instanceid, | 1551361254 | 426419508609  || 0x3DB4B9FA4B2CB36F | SELECT i.id as instancei | 1465274289 | 415565419867  || 0xB4233552504E43B8 | SELECT ir.type as type,  | 1362906755 | 488974931108  |+--------------------+--------------------------+------------+---------------+5 rows in set (0.00 sec)\n\n查询最耗时的 5 条sqlAdmin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time,sum_time/count_star avg_time, min_time, max_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; ORDER BY max_time DESC LIMIT 5;+--------------------+--------------------------+------------+--------------+----------+----------+-----------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time     | avg_time | min_time | max_time  |+--------------------+--------------------------+------------+--------------+----------+----------+-----------+| 0x36CE5295726DB5B4 | SELECT COUNT(*) as total | 146390     | 185951894994 | 1270249  | 445      | 237344243 || 0xDA8C56B5644C0822 | SELECT COUNT(*) as total | 44130      | 24842335265  | 562935   | 494      | 231395575 || 0x8C1B0405E1AAB9DB | SELECT COUNT(*) as total | 1194       | 1356742749   | 1136300  | 624      | 216677507 || 0x6C03197B4A2C34BE | Select *, DateDiff(Date_ | 4796       | 748804483    | 156131   | 607      | 197881845 || 0x1DEFCE9DEF3BDF87 | SELECT DISTINCT i.extid  | 592196     | 40209254260  | 67898    | 416      | 118055372 |+--------------------+--------------------------+------------+--------------+----------+----------+-----------+5 rows in set (0.01 sec)\n\n查找按总执行时间前 5，并且最短执行时间至少为 1 毫秒：Admin&gt; SELECT digest,SUBSTR(digest_text,0,20),count_star,sum_time,sum_time/count_star avg_time, min_time, max_time FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; AND min_time &gt; 1000 ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+-------------+----------+----------+----------+| digest             | SUBSTR(digest_text,0,20) | count_star | sum_time    | avg_time | min_time | max_time |+--------------------+--------------------------+------------+-------------+----------+----------+----------+| 0x9EED412C6E63E477 | SELECT a.id as acco      | 961733     | 24115349801 | 25074    | 10994    | 7046628  || 0x8DDD43A9EA37750D | Select ( Coalesce((      | 107069     | 3156179256  | 29477    | 1069     | 24600674 || 0x9EED412C6E63E477 | SELECT a.id as acco      | 91996      | 1883354396  | 20472    | 10095    | 497877   || 0x08B23A268C35C08E | SELECT id as reward      | 49401      | 244088592   | 4940     | 1237     | 1483791  || 0x437C846F935344F8 | SELECT Distinct i.e      | 164        | 163873101   | 999226   | 1383     | 7905811  |+--------------------+--------------------------+------------+-------------+----------+----------+----------+5 rows in set (0.01 sec)\n\n查找按总执行时间排序的前 5 个查询，平均执行时间至少为 1 秒。还显示总执行时间的百分比：Admin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time,sum_time/count_star avg_time, ROUND(sum_time*100.00/(SELECT SUM(sum_time) FROM stats_mysql_query_digest),3) pct FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; AND sum_time/count_star &gt; 1000000 ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+--------------+----------+-------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time     | avg_time | pct   |+--------------------+--------------------------+------------+--------------+----------+-------+| 0x36CE5295726DB5B4 | SELECT COUNT(*) as total | 146390     | 185951894994 | 1270249  | 2.11  || 0xD38895B4F4D2A4B3 | SELECT instance.name as  | 9783       | 12409642528  | 1268490  | 0.141 || 0x8C1B0405E1AAB9DB | SELECT COUNT(*) as total | 1194       | 1356742749   | 1136300  | 0.015 |+--------------------+--------------------------+------------+--------------+----------+-------+3 rows in set (0.00 sec)\n\n查找按总执行时间排序的前 5 个查询，平均执行时间至少为 15 毫秒，并显示占总执行时间的百分比：Admin&gt; SELECT digest,SUBSTR(digest_text,0,25),count_star,sum_time,sum_time/count_star avg_time, ROUND(sum_time*100.00/(SELECT SUM(sum_time) FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27;),3) pct FROM stats_mysql_query_digest WHERE digest_text LIKE &#x27;SELECT%&#x27; AND sum_time/count_star &gt; 15000 ORDER BY sum_time DESC LIMIT 5;+--------------------+--------------------------+------------+---------------+----------+--------+| digest             | SUBSTR(digest_text,0,25) | count_star | sum_time      | avg_time | pct    |+--------------------+--------------------------+------------+---------------+----------+--------+| 0x38BE36BDFFDBE638 | SELECT instance.name as  | 59360371   | 1096562204931 | 18472    | 13.006 || 0x36CE5295726DB5B4 | SELECT COUNT(*) as total | 146390     | 185951894994  | 1270249  | 2.205  || 0x1DEFCE9DEF3BDF87 | SELECT DISTINCT i.extid  | 592281     | 40215136635   | 67898    | 0.477  || 0xDA8C56B5644C0822 | SELECT COUNT(*) as total | 44130      | 24842335265   | 562935   | 0.295  || 0x9EED412C6E63E477 | SELECT a.id as accountid | 961768     | 24116011513   | 25074    | 0.286  |+--------------------+--------------------------+------------+---------------+----------+--------+5 rows in set (0.00 sec)\n\n规则设置根据 digest 设置规则\nINSERT INTO mysql_query_rules (rule_id,active,digest,destination_hostgroup,apply)VALUES(1,1,&#x27;0x38BE36BDFFDBE638&#x27;,20,1);\n\n根据 match_digest 设置规则(正则表达式)\nINSERT INTO mysql_query_rules (rule_id,active,match_digest,destination_hostgroup,apply)VALUES(1,1,&#x27;^SELECT COUNT\\(\\*\\)&#x27;,20,1);\n\n集群目前已支持同步的数据\n\nglobal_variables (Supported from ProxySQL 2.1.x)\nmysql_query_rules\nmysql_servers\nmysql_users\nproxysql_servers\n\nproxy 集群服务器# 查看select * from proxysql_servers;# 添加集群INSERT INTO `proxysql_servers` (hostname, port, comment) VALUES (&#x27;192.168.31.200&#x27;, 6032, &#x27;proxysql1&#x27;);INSERT INTO `proxysql_servers` (hostname, port, comment) VALUES (&#x27;192.168.31.201&#x27;, 6032, &#x27;proxysql2&#x27;);# 生效并保存LOAD PROXYSQL SERVERS TO RUNTIME;SAVE PROXYSQL SERVERS TO DISK;\n\n设置 proxy 监控账号信息*** 此处有个大坑：cluster_username 不能直接使用 admin 账号，必须新建账号，且在 admin-admin_credentials 中配置账号信息，否则不触发同步\n# 查看 admin 变量SELECT * FROM global_variables WHERE variable_name LIKE &#x27;admin%&#x27;;# 设置集群 proxy 监控账号密码及凭证UPDATE global_variables SET variable_value=&#x27;cluster&#x27; WHERE variable_name=&#x27;admin-cluster_username&#x27;;UPDATE global_variables SET variable_value=&#x27;cluster&#x27; WHERE variable_name=&#x27;admin-cluster_password&#x27;;UPDATE global_variables SET variable_value=&#x27;admin:admin;cluster:cluster&#x27; WHERE variable_name=&#x27;admin-admin_credentials&#x27;;# 生效并保存LOAD ADMIN VARIABLES TO RUNTIME;SAVE ADMIN VARIABLES TO DISK;\n\n查看同步状态# 查看集群状态SELECT * FROM stats_proxysql_servers_metrics;# 查看集群同步状态SELECT * FROM stats_proxysql_servers_checksums;\n\n参考地址官方文档: https://proxysql.com/documentation/官方集群文档: https://proxysql.com/documentation/proxysql-cluster/集群参考: https://proxysql.com/blog/proxysql-cluster/\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/proxysql%E4%BD%BF%E7%94%A8keeplived%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8/","content":"配置主节点配置\nglobal_defs &#123;  script_user root&#125;# 定义检测 proxy 是否正常运行的脚本# interval: 定时心跳间隔(秒)# fall: 失败重试次数# rise: 服务关闭后需要连续几次响应才认为服务重新启动的次数vrrp_script check_proxy &#123; script &quot;/bin/systemctl status proxysql.service&quot; interval 2 fall 2 rise 2&#125;# 优先级指定分配接口的顺序# interface: 当前机器的网卡# priority: 优先级vrrp_instance VI_01 &#123;  state MASTER  interface enp0s3  virtual_router_id 51  priority 101  # vip 配置  virtual_ipaddress &#123;    192.168.31.50  &#125;  # 执行脚本  track_script &#123;    check_proxy  &#125;&#125;\n\n从节点配置\nglobal_defs &#123;  script_user root&#125;vrrp_script check_proxy &#123; script &quot;/bin/systemctl status proxysql.service&quot; interval 2 fall 2 rise 2&#125;vrrp_instance VI_01 &#123;  state BACKUP  interface enp0s3  virtual_router_id 51  priority 100  # The virtual ip address shared between the two loadbalancers  virtual_ipaddress &#123;  192.168.1.50  &#125;  track_script &#123;    check_proxy  &#125;&#125;\n\n参考链接https://mysqldb-info.blogspot.com/2019/08/make-proxysql-for-high-availability.html\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E6%90%AD%E5%BB%BA/","content":"环境信息\n\n\nip\n软件\n\n\n\n192.168.1.201\nnginx、keepalived\n\n\n192.168.1.202\nnginx、keepalived\n\n\nkeepalived 配置master主节点配置\nglobal_defs &#123;  # Keepalived process identifier  router_id nginx&#125;# Script to check whether Nginx is running or notvrrp_script check_nginx &#123;  script &quot;/bin/check_nginx.sh&quot;  interval 2  weight 50&#125;# state: MASTER(主)/BACKUP(备)# interface: 网卡，ip add 命令查看# virtual_router_id: vrrp_instance的唯一IDvrrp_instance VI_01 &#123;  state MASTER  interface enp0s3  virtual_router_id 151  priority 110  # 虚拟ip  virtual_ipaddress &#123;    192.168.31.50/24  &#125;  # 调用的脚本  track_script &#123;    check_nginx  &#125;  authentication &#123;    auth_type AH    auth_pass secret  &#125;&#125;\n\n参考链接nginx+keepalived高可用搭建： https://www.linuxtechi.com/setup-highly-available-nginx-keepalived-linux/\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/nginx/","content":"\n\n\n\n\n安装\nyum 安装\nrpm 安装\n\n\n服务管理\n验证\n\n\n\n安装yum 安装yum install nginx\n\nrpm 安装将下列上传到空文件夹下\ncentos-indexhtml-7-9.el7.centos.noarch.rpmgperftools-libs-2.6.1-1.el7.x86_64.rpmnginx-1.20.1-9.el7.x86_64.rpmnginx-filesystem-1.20.1-9.el7.noarch.rpmopenssl11-libs-1.1.1k-2.el7.x86_64.rpm\n安装\nyum localinstall *.rpm -y\n\n服务管理启动\nservice nginx start\n\n停止\nservice nginx stop\n\n重启\nservice nginx restart\n\n不停机重启\nnginx -s reload\n\n验证访问\ncurl http://127.0.0.1\n\n\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/keepalived/","content":"安装yum 安装apt-get install keepalived\n\nrpm 离线安装依赖关系\nkeepalived-1.3.5-19.el7.x86_64.rpm    - net-snmp-libs-5.7.2-49.el7.x86_64.rpm    - net-snmp-agent-libs-5.7.2-49.el7.x86_64.rpm\n\nrpm -ivh keepalived-1.3.5-19.el7.x86_64.rpm\n\n双机热备\n缺点：只有主服务器不可用时，从服务器才能使用，比较浪费资源\n\n准备条件两台可以浏览器访问的 ubuntu 服务器, 并安装好 keepalived\n服务器A  192.168.1.200服务器B  192.168.1.201\n访问192.168.1.200   显示 192.168.1.200访问192.168.1.201   显示 192.168.1.201\n编辑主从服务器的 keepalived 配置文件配置文件路径: /etc/keepalived/keepalived.conf , 默认是没有的，需要自己手动创建\n主服务器(服务器A)\nglobal_defs &#123;      router_id NodeA  &#125; # 定义脚本vrrp_script chk_nginx &#123;    script &quot;/opt/check_ng.sh&quot; # 脚本地址    interval 3 # 脚本触发间隔（此处表示3秒触发一次）&#125;vrrp_instance VI_1 &#123;      state MASTER    #设置为主服务器      interface enp0s3  #监测网络接口      virtual_router_id 51  #主、备必须一样      priority 100   #(主、备机取不同的优先级，主机值较大，备份机值较小,值越大优先级越高)      advert_int 1   #VRRP Multicast广播周期秒数      authentication &#123;          auth_type PASS  #VRRP认证方式，主备必须一致          auth_pass 1111   #(密码)      &#125;      virtual_ipaddress &#123;          192.168.1.199/24  #VRRP HA虚拟地址      &#125;        # 引用上面定义的脚本    track_script &#123;        chk_nginx    &#125;&#125;  \n\n从服务器(服务器B)\nglobal_defs &#123;      router_id NodeB  &#125;  vrrp_script chk_nginx &#123;    script &quot;/opt/check_ng.sh&quot; # 脚本地址    interval 3 # 脚本触发间隔（此处表示3秒触发一次）&#125;vrrp_instance VI_1 &#123;      state BACKUP    #设置为主服务器      interface enp0s3  #监测网络接口      virtual_router_id 51  #主、备必须一样      priority 90   #(主、备机取不同的优先级，主机值较大，备份机值较小,值越大优先级越高)      advert_int 1   #VRRP Multicast广播周期秒数      authentication &#123;          auth_type PASS  #VRRP认证方式，主备必须一致          auth_pass 1111   #(密码)      &#125;      virtual_ipaddress &#123;          192.168.1.199/24  #VRRP HA虚拟地址      &#125;          # 引用上面定义的脚本    track_script &#123;        chk_nginx    &#125;&#125;\n\ncheck_ng.sh 脚本文件\n用来检查 nginx 是否可用的脚本，不可用的话关闭 keepalived\n#!/bin/bash#时间变量，用于记录日志d=`date --date today +%Y%m%d_%H:%M:%S`#计算nginx进程数量n=`ps -C nginx --no-heading|wc -l`#如果进程为0，则启动nginx，并且再次检测nginx进程数量，#如果还为0，说明nginx无法启动，此时需要关闭keepalivedif [ $n -eq &quot;0&quot; ]; then        /etc/init.d/nginx start        n2=`ps -C nginx --no-heading|wc -l`        if [ $n2 -eq &quot;0&quot;  ]; then                echo &quot;$d nginx down,keepalived will stop&quot; &gt;&gt; /var/log/check_ng.log                systemctl stop keepalived        fifi\n\n启动测试\n在主从服务器分别运行 service keepalived start \n使用 ip add 查看vip地址是否生效\n访问 192.168.1.199 会显示 服务器A 的内容 192.168.1.200，\n关闭服务器A的  keepalived\n再次访问 192.168.1.199 会显示 服务器B 的内容 192.168.1.201\n\nLVS + keepalived参考链接https://www.jianshu.com/p/b050d8861fc1配置文件参数说明 https://www.iteye.com/blog/aoyouzi-2288124\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/jar%E6%B3%A8%E5%86%8C%E5%88%B0windows%E6%9C%8D%E5%8A%A1/","content":"\n\n\n\n\n下载Windows Service Wrapper\n安装\n注册服务\n使用\n参考链接\n\n\n\n\n下载Windows Service Wrapper下载地址：https://github.com/winsw/winsw\n安装复制 WinSW.NET4.exe 到 jar 文件同级目录，并改名为jar文件名\n在同目录创建xml配置文件，与 jar文件同名， 内容如下\n&lt;configuration&gt;&lt;id&gt;fgoc-iccs&lt;/id&gt;&lt;name&gt;fgoc-iccs&lt;/name&gt;&lt;description&gt;This is fgoc-iccs.&lt;/description&gt;&lt;executable&gt;java&lt;/executable&gt;&lt;arguments&gt;-Xms512m -Xmx512m -jar  fgoc-iccs.jar --spring.profiles.active=dev&lt;/arguments&gt;&lt;!-- 开机启动 --&gt;&lt;startmode&gt;Automatic&lt;/startmode&gt;&lt;logpath&gt;./logs&lt;/logpath&gt;&lt;log mode=&quot;roll-by-time&quot;&gt;&lt;pattern&gt;yyyyMMdd&lt;/pattern&gt;&lt;/log&gt;&lt;/configuration&gt;\n\n注册服务fgoc-iccs.exe install \n\n使用# 启动命令net start fgoc-iccs# 停止命令net stop fgoc-iccs# 卸载命令, 如果卸载不了，使用管理员模式打开cmd再运行sc delete fgoc-iccs\n\n参考链接https://www.cnblogs.com/wangchaonan/p/12102150.html\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/","content":"[TOC]\n代码相关\n\n\n快捷键\n说明\n\n\n\nAlt+Insert\nget、set等代码生成\n\n\nCtrl+O\n重写或实现方法\n\n\nCtrl+Alt+T\ntrycatch等快捷方式\n\n\nCtrl+Alt+L\n代码格式化\n\n\nCtrl+Alt+O\n删除无用的import\n\n\nCtrl+Shift+U\n大小写转换\n\n\n搜索\n\n\n快捷键\n说明\n\n\n\n双击Shift\n搜索任何位置\n\n\nCtrl+N\n查找类名\n\n\nCtrl+Shift+N\n查找文件名\n\n\nCtrl+F\n搜索当前文件的代码\n\n\nCtrl+Shift+F\n搜索全部文件的代码\n\n\nCtrl+R\n替换当前文件的代码\n\n\nCtrl+Shift+R\n替换全部文件的代码\n\n\n跳转\n\n\n快捷键\n说明\n\n\n\nCtrl+G\n跳转到指定行\n\n\nCtrl+E\n跳转到上一个文件\n\n\nCtrl+Shift+Backspcace\n跳转到上一次修改代码的地方\n\n\nAlt+↓↑\n跳转到下或上个方法\n\n\nAlt+]/[\n跳转到括号的开始或结尾\n\n\nF2/Shift+F2\n跳转到下/上一个高亮错误提示位置\n\n\nF4\n跳转到定义的位置\n\n\nF11\n添加备注\n\n\nCtrl+F11\n添加备注，并打上数字标记\n\n\nCtrl+0-9\n跳转到备注位置\n\n\nShift+F11 / Alt+2\n显示备注列表弹框/侧边栏\n\n\nCtrl+Tab\n显示当前打开的文件弹框\n\n\n类相关\n\n\n\n快捷键\n说明\n\n\n\nAlt+F7\n查看字段，方法，类的所有使用过地方\n\n\nCtrl+Shift+I\n弹框显示定义的代码(不需要跳转到源文件)\n\n\nAlt+7/Ctrl+F12\n侧边/弹框查看当前类的类结构(构造器，属性，方法)\n\n\nCtrl+H\n查看当前类的继承关系\n\n\nCtrl+Shift+H\n查看当前方法的子类重写\n\n\n\n官方快捷键参考\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"\n\n\n\n\ndocker常用命令\n镜像命令\n查看本地镜像\n搜索远程镜像\n下载远程镜像\n删除本地镜像\n\n\n容器命令\n新建并启动容器\n列出运行的容器\n退出容器\n启动容器\n重启容器\n关闭容器\n强制关闭容器\n删除已停止的容器\n与已启动的容器交互\n从容器拷贝文件到主机\n\n\n提交镜像\n查看占用空间\n删除未使用的镜像\n删除未使用的容器\n\n\n\n\n\ndocker常用命令镜像命令查看本地镜像docker images [options]\n\n-a 列出本地所有镜像\n-q 只显示镜像id\n–digest 显示摘要信息\n–no-trunc 显示所有信息\n\n搜索远程镜像docker search [options] 镜像名\n\n–no-trunc 显示所有信息\n-s 列出收藏数不少于指定值的镜像\n–automated 只列出 automated build 类型的镜像\n\n下载远程镜像docker pull 镜像名字[:TAG]\n删除本地镜像删除单个\ndocker rmi -f 镜像id\n\n删除多个\ndocker rmi -f 镜像名1:TAG 镜像名2:TAG\n\n删除全部\ndocker rmi -f $&#123;docker images -qa&#125;\n\n容器命令新建并启动容器docker run [options] 镜像 [COMMAND][ARG...]\n\n–name=”容器新名字”: 为容器指定一个名称\n-d: 后台运行容器\n-i: 以交互模式运行，与-t一起使用\n-t: 为容器重新分配一个伪输入终端，与 -i 一起使用\n-p: 指定端口映射，有四种格式\n\nip:hostPort:containerPortip::containerPorthostPort:containerPortcontainerPort\n\n列出运行的容器docker ps [options]\n\n\n-a :列出当前所有正在运行的容器+历史上运行过的\n\n-l :显示最近创建的容器。\n\n-n：显示最近n个创建的容器。\n\n-q :静默模式，只显示容器编号。\n\n–no-trunc :不截断输出。\n\n\n退出容器exit\n\n启动容器docker start 容器id或容器名\n\n重启容器docker restart 容器id或容器名\n\n关闭容器docker stop 容器id或容器名\n\n强制关闭容器docker kill 容器id或容器名\n\n删除已停止的容器## 删除单个docker rm 容器id## 删除多个docker rm -f $&#123;docker ps -a -q&#125;\n\n与已启动的容器交互## 在容器中打开新终端docker exec -it 容器id 命令## 直接使用容器中的终端docker attach 容器id\n\n从容器拷贝文件到主机docker cp 容器id:容器内路径 本机路径\n\n提交镜像docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 要生成的镜像名:[标签名]\n\n查看占用空间docker system df -v\n\n删除未使用的镜像docker image prune\n\n删除未使用的容器docker container prune\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/centos%E5%8D%87%E7%BA%A7openssh/","content":"\n\n\n\n\n安装telnet备用（可选）\n升级 openssh\n关闭 telnet\n参考地址\n\n\n\n安装telnet备用（可选）安装新的ssh之后，只要配置好启动，就可以做到无缝切换，但是中途断开就不能连接了，为了防止这种情况，我们可以安装telnet当作备用，若是你能保证中途不会断开，此步骤可以忽略\n\n安装\nyum install telnet telnet-server -y\n启动\n[root@localhost openssh]# systemctl enable telnet.socketCreated symlink from /etc/systemd/system/sockets.target.wants/telnet.socket to /usr/lib/systemd/system/telnet.socket.[root@localhost openssh]# systemctl start telnet.socket\n连接\n# 创建临时登录的用户[root@localhost openssh]# useradd testuser[root@localhost openssh]# passwd testuserChanging password for user testuser.New password:BAD PASSWORD: The password is shorter than 8 charactersRetype new password:passwd: all authentication tokens updated successfully.# 本地测试[root@localhost openssh]# telnet 127.0.0.1Trying 127.0.0.1...Connected to 127.0.0.1.Escape character is &#x27;^]&#x27;.Kernel 3.10.0-1160.el7.x86_64 on an x86_64localhost login: testuserPassword:# 切换 root 账号[testuser@localhost ~]$ su rootPassword:[root@localhost testuser]#\n\n升级 openssh下载地址https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.0p1.tar.gz\n安装依赖包\nyum install zlib-devel  openssl-devel  pam-devel gcc-c++ -y\n\n备份\n[root@localhost openssh]# mkdir /etc/ssh_old[root@localhost openssh]# mv /etc/ssh/* /etc/ssh_old/\n\n解压、编译安装\n# 解压[root@localhost openssh]# tar xzvf openssh-9.0p1.tar.gz[root@localhost openssh]# cd openssh-9.0p1# 编译安装[root@localhost openssh-9.0p1]# ./configure --prefix=/usr/ --sysconfdir=/etc/ssh --with-ssl-dir=/usr/local/lib64/ --with-zlib --with-pam --with-md5-password --with-ssl-engine --with-selinux[root@localhost openssh-9.0p1]# make &amp;&amp; make install# 验证[root@localhost openssh-9.0p1]# ssh -VOpenSSH_9.0p1, OpenSSL 1.0.2k-fips  26 Jan 2017\n\n配置1.修改sshd_config\n# 修改 PermitRootLogin，允许使用 root 远程登录PermitRootLogin yes\n\n2.启动\n# 移走以前的ssh服务, 防止与新的冲突[root@localhost openssh-9.0p1]# mv /usr/lib/systemd/system/sshd.service /etc/ssh_old/sshd.service[root@localhost openssh-9.0p1]# mv /usr/lib/systemd/system/sshd.socket /etc/ssh_old/sshd.socket# 在解压包中拷贝一些文件[root@localhost openssh-9.0p1]# cp -a contrib/redhat/sshd.init /etc/init.d/sshd# 重启[root@localhost openssh-9.0p1]# service sshd restartReloading systemd:                                         [  OK  ]Restarting sshd (via systemctl):                           [  OK  ][root@localhost openssh-9.0p1]# systemctl daemon-reload# 添加自启动[root@localhost openssh-9.0p1]# chkconfig --add sshd[root@localhost openssh-9.0p1]# chkconfig sshd on\n\n关闭 telnetsystemctl stop telnet.socketsystemctl disable telnet.socket\n\n参考地址https://segmentfault.com/a/1190000022756834\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/centos%E6%9C%AC%E5%9C%B0yum%E5%AE%89%E8%A3%85/","content":"安装yum install yum-plugin-downloadonly\n\n使用# 创建用来存 rpm 包的文件夹mkdir /data/rpm -p# 下载 keepalived 的 rpm 及依赖的 rpm 包到 /data/rpm m目录下yum install –downloadonly –downloaddir=/data/rpm keepalived# 安装 keepalivedcd /data/rpm/yum localinstall *.rpm -y\n\n\n\n\n参考链接https://www.cnblogs.com/nmap/p/9511848.html\n","categories":[],"tags":[]},{"title":"","url":"/2022/09/05/centos7.9%E9%99%8D%E7%BA%A77.5/","content":"\n\n\n\n\ncentos7.9 降级 7.5\n参考链接\n\n\n\n\ncentos7.9 降级 7.5下载 Centos 7.5 的rpm包\nwget --no-check-certificate https://www.repo.cloudlinux.com/cloudlinux/migrate/release-files/centos/7/x86_64/centos-release-7-5.1804.el7.centos.x86_64.rpm\n\n安装\nrpm -Uvh --oldpackage centos-release-7-5.1804.el7.centos.x86_64.rpm\n\n重启\nreboot\n\n参考链接https://www.its203.com/article/weixin_45214930/118481574\n","categories":[],"tags":[]},{"title":"Hello World","url":"/2022/09/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":[],"tags":[]}]